[["index.html", "Working with Census Data in R 1 Introduction", " Working with Census Data in R Aditya Ranganath 2022-01-06 1 Introduction "],["basic-data-retrieval.html", "2 Basic Data Retrieval 2.1 Load table of variables 2.2 Query the census API, and retrieve data using tidycensus 2.3 Modify a census API call by altering arguments to the “get_decennial” function", " 2 Basic Data Retrieval 2.1 Load table of variables We begin by loading a table of decennial census variables, and assigning it to an object named decennial_variables: decennial_variables&lt;-load_variables(2010, &quot;sf1&quot;) We can print this table to the console by simply printing the object name, decennial_variables: # Print table of 2010 decennial variables to console decennial_variables ## # A tibble: 8,959 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 H001001 Total HOUSING UNITS ## 2 H002001 Total URBAN AND RURAL ## 3 H002002 Total!!Urban URBAN AND RURAL ## 4 H002003 Total!!Urban!!Inside urbanized areas URBAN AND RURAL ## 5 H002004 Total!!Urban!!Inside urban clusters URBAN AND RURAL ## 6 H002005 Total!!Rural URBAN AND RURAL ## 7 H002006 Total!!Not defined for this file URBAN AND RURAL ## 8 H003001 Total OCCUPANCY STATUS ## 9 H003002 Total!!Occupied OCCUPANCY STATUS ## 10 H003003 Total!!Vacant OCCUPANCY STATUS ## # … with 8,949 more rows To view this table in R Studio’s data viewer, pass the object to the View function: View(decennial_variables) When the data is open in the R Studio data viewer, it will look something like this: Figure 2.1: Table of 2010 census variable descriptions and codes 2.2 Query the census API, and retrieve data using tidycensus Now, let’s generate a table of population by state, based on the 2010 decennial census, and assign this new dataset to an object named state_population_2010: state_population_2010&lt;-get_decennial(geography = &quot;state&quot;, variables = &quot;P001001&quot;, year = 2010) ## Getting data from the 2010 decennial Census ## Using Census Summary File 1 As with our table of variable descriptions (decennial_variables), we can view the data by typing the object name, which prints its contents to the console: state_population_2010 ## # A tibble: 52 x 4 ## GEOID NAME variable value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama P001001 4779736 ## 2 02 Alaska P001001 710231 ## 3 04 Arizona P001001 6392017 ## 4 05 Arkansas P001001 2915918 ## 5 06 California P001001 37253956 ## 6 22 Louisiana P001001 4533372 ## 7 21 Kentucky P001001 4339367 ## 8 08 Colorado P001001 5029196 ## 9 09 Connecticut P001001 3574097 ## 10 10 Delaware P001001 897934 ## # … with 42 more rows Recall that we can also bring up the data in the R Studio data viewer using the View function: View(state_population_2010) GEOID NAME variable value 01 Alabama P001001 4779736 02 Alaska P001001 710231 04 Arizona P001001 6392017 05 Arkansas P001001 2915918 06 California P001001 37253956 22 Louisiana P001001 4533372 2.3 Modify a census API call by altering arguments to the “get_decennial” function Let’s say that instead of a dataset that contains the population for each state (based on the 2010) census, we want a dataset that contains the population for each county in the state of Colorado. We can generate this county-level dataset by simply changing the geography argument in the get_decennial function, and specifying state=\"CO\". We’ll assign this county-level population dataset for Colorado to a new object called CO_county_population_2010: # Generate dataset with information on population by county in Colorado, and assign to an object named &quot;CO_county_population_2010&quot; CO_county_population_2010&lt;-get_decennial(geography = &quot;county&quot;, state=&quot;CO&quot;, variables = &quot;P001001&quot;, year = 2010) # View dataset View(CO_county_population_2010) GEOID NAME variable value 08023 Costilla County, Colorado P001001 3524 08025 Crowley County, Colorado P001001 5823 08027 Custer County, Colorado P001001 4255 08029 Delta County, Colorado P001001 30952 08031 Denver County, Colorado P001001 600158 08035 Douglas County, Colorado P001001 285465 "],["basic-data-cleaning-and-manipulation-with-dplyr.html", "3 Basic data cleaning and manipulation with dplyr 3.1 Renaming and deleting columns 3.2 Modifying column contents 3.3 Filtering Data 3.4 Creating new variables", " 3 Basic data cleaning and manipulation with dplyr Once data has been pulled into R Studio via tidycensus, it’s possible to work with data using the entire suite of data analysis tools available through the tidyverse. Among other things, we can use tidyverse tools to clean up the census data that we retrieve using tidycensus. 3.1 Renaming and deleting columns Let’s clean up the dataset of Colorado’s 2010 population distribution with respect to counties that we just created in the previous section (CO_county_population_2010). As a reminder, the first few rows of that dataset look like this: View(CO_county_population_2010) kable(head(CO_county_population_2010, n=6)) GEOID NAME variable value 08023 Costilla County, Colorado P001001 3524 08025 Crowley County, Colorado P001001 5823 08027 Custer County, Colorado P001001 4255 08029 Delta County, Colorado P001001 30952 08031 Denver County, Colorado P001001 600158 08035 Douglas County, Colorado P001001 285465 Let’s remove the “variable” field, and rename the “value” field as “Population”. We can perform these operations by using functions from the dplyr package, which is a part of the tidyverse. We can use the select function to remove the “variable” field, and the rename function to rename the name of the field containing the population data from “value” to “population”. We’ll use the pipe operator (%&gt;%) to chain together these functions, which allows us to perform both of these cleaning operations in one block of code; we’ll assign the revised dataset to a new object named CO_county_population_2010_cleaned: # Takes &quot;CO_county_population_2010&quot;, deletes the &quot;variable&quot; column, renames the &quot;value&quot; column as &quot;population&quot;, and assigns this modified dataset to a new object names &quot;CO_county_population_2010_cleaned&quot; CO_county_population_2010_cleaned&lt;-CO_county_population_2010 %&gt;% select(-variable) %&gt;% rename(population=value) Let’s view the dataset to ensure that these changes have been made: View(CO_county_population_2010_cleaned) GEOID NAME population 08023 Costilla County, Colorado 3524 08025 Crowley County, Colorado 5823 08027 Custer County, Colorado 4255 08029 Delta County, Colorado 30952 08031 Denver County, Colorado 600158 08035 Douglas County, Colorado 285465 Note that the select function can either be used to directly delete columns from a dataset (if these columns are preceded by a -) or alternatively, to designate the columns to keep (which will delete the residual columns). So, for example, the following syntax would also effectively delete the variable column, and rename the value column: # Takes &quot;CO_county_population_2010&quot;, deletes the &quot;variable&quot; column (using slightly different syntax than above), renames the &quot;value&quot; column as &quot;population&quot;, and assigns this modified dataset to a new object names &quot;CO_county_population_2010_cleaned_alternate&quot; CO_county_population_2010_cleaned_alternate&lt;-CO_county_population_2010 %&gt;% select(GEOID, NAME, value) %&gt;% rename(population=value) Let’s check to make sure that CO_county_population_cleaned_alternate looks the same as CO_county_population_cleaned above: View(CO_county_population_2010_cleaned_alternate) GEOID NAME population 08023 Costilla County, Colorado 3524 08025 Crowley County, Colorado 5823 08027 Custer County, Colorado 4255 08029 Delta County, Colorado 30952 08031 Denver County, Colorado 600158 08035 Douglas County, Colorado 285465 3.2 Modifying column contents Note that the “Name” column in our cleaned county-level dataset of the Colorado population contains names in the format “ County, Colorado”. What if we want to edit this, such that we replace the “NAME” column with a new column named “County”, which contains simply the name of the county (i.e. &lt;“County Name”&gt; instead of &lt;“County Name&gt; County, Colorado”&gt;)? To do so, we can use the mutate function to create a new column named “County”, and then populate this column with the string that results from removing “County, Colorado” from the “NAME” column; then, we can go ahead and remove the “NAME” column. Below, instead of assigning this modified dataset to a new object, we’ll simply assign it back to CO_county_population_2010_cleaned, which overwrites that object’s existing contents with these changes: # Take the &quot;CO_county_population_2010_cleaned&quot; object and CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% mutate(County=str_remove(NAME, &quot;County, Colorado&quot;)) %&gt;% select(-NAME) kable(head(CO_county_population_2010_cleaned, n=6)) GEOID population County 08023 3524 Costilla 08025 5823 Crowley 08027 4255 Custer 08029 30952 Delta 08031 600158 Denver 08035 285465 Douglas 3.3 Filtering Data 3.4 Creating new variables "],["grouping-operations-and-summary-statistics.html", "4 Grouping operations and summary statistics", " 4 Grouping operations and summary statistics "],["elementary-visualization.html", "5 Elementary Visualization", " 5 Elementary Visualization "],["advanced-data-retrieval.html", "6 Advanced data retrieval", " 6 Advanced data retrieval https://mattherman.info/blog/tidycensus-mult-year/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
