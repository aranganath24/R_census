[["index.html", "Working with Census Data in R 1 Introduction", " Working with Census Data in R Aditya Ranganath 2022-01-08 1 Introduction "],["preliminaries.html", "2 Preliminaries", " 2 Preliminaries library(tidycensus) library(tidyverse) library(knitr) library(psych) library(stringr) "],["basic-data-retrieval.html", "3 Basic Data Retrieval 3.1 Load table of variables 3.2 Query the census API, and retrieve data using tidycensus 3.3 Modify a census API call by altering arguments to the “get_decennial” function", " 3 Basic Data Retrieval 3.1 Load table of variables We begin by loading a table of decennial census variables, and assigning it to an object named decennial_variables: decennial_variables&lt;-load_variables(2010, &quot;sf1&quot;) We can print this table to the console by simply printing the object name, decennial_variables: # Print table of 2010 decennial variables to console decennial_variables ## # A tibble: 8,959 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 H001001 Total HOUSING UNITS ## 2 H002001 Total URBAN AND RURAL ## 3 H002002 Total!!Urban URBAN AND RURAL ## 4 H002003 Total!!Urban!!Inside urbanized areas URBAN AND RURAL ## 5 H002004 Total!!Urban!!Inside urban clusters URBAN AND RURAL ## 6 H002005 Total!!Rural URBAN AND RURAL ## 7 H002006 Total!!Not defined for this file URBAN AND RURAL ## 8 H003001 Total OCCUPANCY STATUS ## 9 H003002 Total!!Occupied OCCUPANCY STATUS ## 10 H003003 Total!!Vacant OCCUPANCY STATUS ## # … with 8,949 more rows To view this table in R Studio’s data viewer, pass the object to the View function: View(decennial_variables) When the data is open in the R Studio data viewer, it will look something like this: Figure 3.1: Table of 2010 census variable descriptions and codes 3.2 Query the census API, and retrieve data using tidycensus Now, let’s generate a table of population by state, based on the 2010 decennial census, and assign this new dataset to an object named state_population_2010: state_population_2010&lt;-get_decennial(geography = &quot;state&quot;, variables = &quot;P001001&quot;, year = 2010) ## Getting data from the 2010 decennial Census ## Using Census Summary File 1 As with our table of variable descriptions (decennial_variables), we can view the data by typing the object name, which prints its contents to the console: state_population_2010 ## # A tibble: 52 x 4 ## GEOID NAME variable value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama P001001 4779736 ## 2 02 Alaska P001001 710231 ## 3 04 Arizona P001001 6392017 ## 4 05 Arkansas P001001 2915918 ## 5 06 California P001001 37253956 ## 6 22 Louisiana P001001 4533372 ## 7 21 Kentucky P001001 4339367 ## 8 08 Colorado P001001 5029196 ## 9 09 Connecticut P001001 3574097 ## 10 10 Delaware P001001 897934 ## # … with 42 more rows Recall that we can also bring up the data in the R Studio data viewer using the View function: View(state_population_2010) GEOID NAME variable value 01 Alabama P001001 4779736 02 Alaska P001001 710231 04 Arizona P001001 6392017 05 Arkansas P001001 2915918 06 California P001001 37253956 22 Louisiana P001001 4533372 3.3 Modify a census API call by altering arguments to the “get_decennial” function Let’s say that instead of a dataset that contains the population for each state (based on the 2010) census, we want a dataset that contains the population for each county in the state of Colorado. We can generate this county-level dataset by simply changing the geography argument in the get_decennial function, and specifying state=\"CO\". We’ll assign this county-level population dataset for Colorado to a new object called CO_county_population_2010: # Generate dataset with information on population by county in Colorado, and assign to an object named &quot;CO_county_population_2010&quot; CO_county_population_2010&lt;-get_decennial(geography = &quot;county&quot;, state=&quot;CO&quot;, variables = &quot;P001001&quot;, year = 2010) # View dataset View(CO_county_population_2010) GEOID NAME variable value 08023 Costilla County, Colorado P001001 3524 08025 Crowley County, Colorado P001001 5823 08027 Custer County, Colorado P001001 4255 08029 Delta County, Colorado P001001 30952 08031 Denver County, Colorado P001001 600158 08035 Douglas County, Colorado P001001 285465 "],["basic-data-cleaning-and-manipulation-with-dplyr.html", "4 Basic data cleaning and manipulation with dplyr 4.1 Renaming and deleting columns 4.2 Modifying columns 4.3 Subsetting Data 4.4 Creating new variables", " 4 Basic data cleaning and manipulation with dplyr Once data has been pulled into R Studio via tidycensus, it’s possible to work with data using the entire suite of data analysis tools available through the tidyverse. Among other things, we can use tidyverse tools to clean up, modify, query, and augment the census datasets that we retrieve using tidycensus. 4.1 Renaming and deleting columns 4.1.1 The rename and select functions Let’s clean up the dataset of Colorado’s 2010 population distribution with respect to counties that we just created in the previous section (CO_county_population_2010). As a reminder, the first few rows of that dataset look like this: View(CO_county_population_2010) kable(head(CO_county_population_2010, n=6)) GEOID NAME variable value 08023 Costilla County, Colorado P001001 3524 08025 Crowley County, Colorado P001001 5823 08027 Custer County, Colorado P001001 4255 08029 Delta County, Colorado P001001 30952 08031 Denver County, Colorado P001001 600158 08035 Douglas County, Colorado P001001 285465 Let’s remove the “variable” field, and rename the “value” field as “Population”. We can perform these operations by using functions from the dplyr package, which is a part of the tidyverse. We can use the select function to remove the “variable” field, and the rename function to rename the name of the field containing the population data from “value” to “population”. We’ll use the pipe operator (%&gt;%) to chain together these functions, which allows us to perform both of these cleaning operations in one block of code; we’ll assign the revised dataset to a new object named CO_county_population_2010_cleaned: # Takes &quot;CO_county_population_2010&quot;, deletes the &quot;variable&quot; column, renames the &quot;value&quot; column as &quot;population&quot;, and assigns this modified dataset to a new object names &quot;CO_county_population_2010_cleaned&quot; CO_county_population_2010_cleaned&lt;-CO_county_population_2010 %&gt;% select(-variable) %&gt;% rename(population=value) Let’s view the dataset to ensure that these changes have been implemented: View(CO_county_population_2010_cleaned) GEOID NAME population 08023 Costilla County, Colorado 3524 08025 Crowley County, Colorado 5823 08027 Custer County, Colorado 4255 08029 Delta County, Colorado 30952 08031 Denver County, Colorado 600158 08035 Douglas County, Colorado 285465 Note that the select function can either be used to directly delete columns from a dataset (if these columns are preceded by a -) or alternatively, to designate the columns to keep (which will delete the residual columns). So, for example, the following syntax would also effectively delete the variable column, and rename the value column: # Takes &quot;CO_county_population_2010&quot;, deletes the &quot;variable&quot; column (using slightly different syntax than above), renames the &quot;value&quot; column as &quot;population&quot;, and assigns this modified dataset to a new object names &quot;CO_county_population_2010_cleaned_alternate&quot; CO_county_population_2010_cleaned_alternate&lt;-CO_county_population_2010 %&gt;% select(GEOID, NAME, value) %&gt;% rename(population=value) Let’s check to make sure that CO_county_population_cleaned_alternate looks the same as CO_county_population_cleaned above: View(CO_county_population_2010_cleaned_alternate) GEOID NAME population 08023 Costilla County, Colorado 3524 08025 Crowley County, Colorado 5823 08027 Custer County, Colorado 4255 08029 Delta County, Colorado 30952 08031 Denver County, Colorado 600158 08035 Douglas County, Colorado 285465 4.2 Modifying columns 4.2.1 Columns and string operations Note that the “Name” column in our cleaned county-level dataset of the Colorado population contains names in the format “ County, Colorado”. What if we want to edit this, such that we replace the “NAME” column with a new column named “County”, which contains simply the name of the county (i.e. &lt;“County Name”&gt; instead of &lt;“County Name&gt; County, Colorado”&gt;)? To do so, we can use the mutate function to create a new column named “County”, and then populate this column with the string that results from removing “County, Colorado” from the “NAME” column; then, we can go ahead and remove the “NAME” column. Below, instead of assigning this modified dataset to a new object, we’ll simply assign it back to CO_county_population_2010_cleaned, which overwrites that object’s existing contents with these changes: # Take the &quot;CO_county_population_2010_cleaned&quot; dataset, create a new variable named &quot;County&quot; that takes the information in the &quot;NAME&quot; column and removes the part of the string that contains &quot;County, Colorado&quot;, and then remove the now superfluous &quot;NAME&quot; column CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% mutate(County=str_remove(NAME, &quot; County, Colorado&quot;)) %&gt;% select(-NAME) # View &quot;CO_county_population_2010_cleaned&quot; (Note that only the first six records are printed in this guide) View(CO_county_population_2010_cleaned) GEOID population County 08023 3524 Costilla 08025 5823 Crowley 08027 4255 Custer 08029 30952 Delta 08031 600158 Denver 08035 285465 Douglas 4.2.2 The relocate function It’s worth noting that we can use the relocate function to reorder a dataset’s columns to our specifications. For example, note that currently, the population column is sandwiched between “GEOID” and “County”; what if we prefer that the “population” column is the last column in the dataset? We can change the column order using the relocate function, and specify the desired relative position of a given column using either the .before or .after argument: CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% relocate(population, .after=County) View(CO_county_population_2010_cleaned) GEOID County population 08023 Costilla 3524 08025 Crowley 5823 08027 Custer 4255 08029 Delta 30952 08031 Denver 600158 08035 Douglas 285465 Note that if neither the .before nor .after arguments are specified within the relocate function, the column that is passed to relocate will automatically be moved to the front of the dataset (i.e. it will be the first column). 4.3 Subsetting Data 4.3.1 The filter function dplyr also allows us to easily subset census data retrieved from tidycensus. Let’s say, for example, that we want to select only those counties in CO_county_population_2010_cleaned that have a population greater than 100,000. To do so, we can specify this condition with the appropriate logical operator within the filter function. We’ll assign this subsetted data to a new object named CO_large_counties: CO_large_counties&lt;-CO_county_population_2010_cleaned %&gt;% filter(population&gt;100000) Now, let’s view our newly created table of Colorado counties with a population of greater than 100,000: View(CO_large_counties) GEOID County population 08031 Denver 600158 08035 Douglas 285465 08041 El Paso 622263 08069 Larimer 299630 08059 Jefferson 534543 08077 Mesa 146723 08101 Pueblo 159063 08123 Weld 252825 08001 Adams 441603 08005 Arapahoe 572003 08013 Boulder 294567 Note that the table is not arranged in order, with respect to the population. Let’s reorder the dataset’s rows, in descending order with respect to the population variable (such that the most populous county appears in the first row): CO_large_counties&lt;-CO_large_counties %&gt;% arrange(desc(population)) View(CO_large_counties) GEOID County population 08041 El Paso 622263 08031 Denver 600158 08005 Arapahoe 572003 08059 Jefferson 534543 08001 Adams 441603 08069 Larimer 299630 08013 Boulder 294567 08035 Douglas 285465 08123 Weld 252825 08101 Pueblo 159063 08077 Mesa 146723 If we want to arrange the dataset in ascending order with respect to the population (such that the least populous county appears on top), we can use the following: CO_large_counties&lt;-CO_large_counties %&gt;% arrange(population) View(CO_large_counties) GEOID County population 08077 Mesa 146723 08101 Pueblo 159063 08123 Weld 252825 08035 Douglas 285465 08013 Boulder 294567 08069 Larimer 299630 08001 Adams 441603 08059 Jefferson 534543 08005 Arapahoe 572003 08031 Denver 600158 08041 El Paso 622263 It is also possible to filter based on text; for example, if we want to extract the record for Denver, we could use the following (note the double equal sign in the expression): CO_large_counties %&gt;% filter(County==&quot;Denver&quot;) ## # A tibble: 1 x 3 ## GEOID County population ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08031 Denver 600158 Note that above, we didn’t assign this subsetted record to it’s own object, but we could have easily done so. Below, let’s subset Denver and Boulder counties, and assign these records to a new object, named denver_boulder: denver_boulder&lt;-CO_large_counties %&gt;% filter(County==&quot;Denver&quot;|County==&quot;Boulder&quot;) View(denver_boulder) kable(denver_boulder) GEOID County population 08013 Boulder 294567 08031 Denver 600158 Note the syntax above; the code that reads filter(County==\"Denver\"|County==\"Boulder) specifies that we want to pull out all records where the “County” column takes on the value “Denver” OR (denoted by the |) “Boulder”. While filter is the most common function used to subset data according to specified criteria, there are others that come in handy as well. 4.3.2 slice functions It is often useful to extract rows with particularly high or low values for a given variable. This is where the slice functions of dplyr can come in handy. Let’s say we want to extract the county with the largest population in the CO_county_population_2010_cleaned dataset; we can do so by passing the “population” variable as an argument to the slice_max function: CO_county_population_2010_cleaned %&gt;% slice_max(population) ## # A tibble: 1 x 3 ## GEOID County population ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08041 El Paso 622263 If we don’t want the single largest county by population, it is easy to extract records with the “n” largest values of a variable by specifying n as an argument. For example, if we wanted the four most populous counties, we would specify n=4 after the population argument: CO_county_population_2010_cleaned %&gt;% slice_max(population, n=4) ## # A tibble: 4 x 3 ## GEOID County population ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08041 El Paso 622263 ## 2 08031 Denver 600158 ## 3 08005 Arapahoe 572003 ## 4 08059 Jefferson 534543 The slice_min function is analogous to the slice_max function, but extracts the rows associated with the “n” smallest values of a variable. For example, the code below extracts the 8 smallest counties by population (note that unlike in the slice_max example, we’ll assign the resulting subset to a new object, named CO_counties_8smallest): CO_counties_8smallest&lt;-CO_county_population_2010_cleaned %&gt;% slice_min(population, n=8) View(CO_counties_8smallest) GEOID County population 08111 San Juan 699 08079 Mineral 712 08053 Hinsdale 843 08057 Jackson 1394 08061 Kiowa 1398 08017 Cheyenne 1836 08033 Dolores 2064 08115 Sedgwick 2379 4.4 Creating new variables After retrieving a census dataset, we may want to recode variables, or generate new variables based on existing variables. For instance, perhaps we want to create a new qualitative indicator variable named “Population_Category” in the CO_county_population_2010_cleaned dataset that is coded as “High Population” if a county’s population is greater than 100,000; coded as “Medium Population” if it is between 10,000 and 100,000; and “Low Population” if it is below 10,000. CO_county_population_2010_cleaned&lt;- CO_county_population_2010_cleaned %&gt;% mutate(Population_Category=case_when(population&gt;=100000~&quot;High Population&quot;, population&lt;100000 &amp; population&gt;=10000~&quot;Medium Population&quot;, population&lt;10000~&quot;Low Population&quot;)) View(CO_county_population_2010_cleaned) GEOID County population Population_Category 08023 Costilla 3524 Low Population 08025 Crowley 5823 Low Population 08027 Custer 4255 Low Population 08029 Delta 30952 Medium Population 08031 Denver 600158 High Population 08035 Douglas 285465 High Population 08033 Dolores 2064 Low Population 08049 Grand 14843 Medium Population 08039 Elbert 23086 Medium Population 08041 El Paso 622263 High Population 08043 Fremont 46824 Medium Population 08045 Garfield 56389 Medium Population 08047 Gilpin 5441 Low Population 08069 Larimer 299630 High Population 08051 Gunnison 15324 Medium Population 08053 Hinsdale 843 Low Population 08055 Huerfano 6711 Low Population 08057 Jackson 1394 Low Population 08059 Jefferson 534543 High Population 08061 Kiowa 1398 Low Population 08063 Kit Carson 8270 Low Population 08065 Lake 7310 Low Population 08071 Las Animas 15507 Medium Population 08067 La Plata 51334 Medium Population 08087 Morgan 28159 Medium Population 08073 Lincoln 5467 Low Population 08075 Logan 22709 Medium Population 08077 Mesa 146723 High Population 08079 Mineral 712 Low Population 08081 Moffat 13795 Medium Population 08083 Montezuma 25535 Medium Population 08085 Montrose 41276 Medium Population 08099 Prowers 12551 Medium Population 08089 Otero 18831 Medium Population 08091 Ouray 4436 Low Population 08093 Park 16206 Medium Population 08095 Phillips 4442 Low Population 08097 Pitkin 17148 Medium Population 08111 San Juan 699 Low Population 08107 Routt 23509 Medium Population 08109 Saguache 6108 Low Population 08101 Pueblo 159063 High Population 08103 Rio Blanco 6666 Low Population 08105 Rio Grande 11982 Medium Population 08113 San Miguel 7359 Low Population 08115 Sedgwick 2379 Low Population 08117 Summit 27994 Medium Population 08119 Teller 23350 Medium Population 08121 Washington 4814 Low Population 08123 Weld 252825 High Population 08125 Yuma 10043 Medium Population 08011 Bent 6499 Low Population 08001 Adams 441603 High Population 08005 Arapahoe 572003 High Population 08007 Archuleta 12084 Medium Population 08009 Baca 3788 Low Population 08003 Alamosa 15445 Medium Population 08021 Conejos 8256 Low Population 08013 Boulder 294567 High Population 08014 Broomfield 55889 Medium Population 08015 Chaffee 17809 Medium Population 08017 Cheyenne 1836 Low Population 08019 Clear Creek 9088 Low Population 08037 Eagle 52197 Medium Population sum(CO_county_population_2010_cleaned$population) ## [1] 5029196 CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% mutate(county_population_concentration=((population/5029196)*100)) View(CO_county_population_2010_cleaned) GEOID County population Population_Category county_population_concentration 08023 Costilla 3524 Low Population 0.0700708 08025 Crowley 5823 Low Population 0.1157839 08027 Custer 4255 Low Population 0.0846060 08029 Delta 30952 Medium Population 0.6154463 08031 Denver 600158 High Population 11.9334780 08035 Douglas 285465 High Population 5.6761558 08033 Dolores 2064 Low Population 0.0410404 08049 Grand 14843 Medium Population 0.2951366 08039 Elbert 23086 Medium Population 0.4590396 08041 El Paso 622263 High Population 12.3730115 08043 Fremont 46824 Medium Population 0.9310435 08045 Garfield 56389 Medium Population 1.1212329 08047 Gilpin 5441 Low Population 0.1081883 08069 Larimer 299630 High Population 5.9578111 08051 Gunnison 15324 Medium Population 0.3047008 08053 Hinsdale 843 Low Population 0.0167621 08055 Huerfano 6711 Low Population 0.1334408 08057 Jackson 1394 Low Population 0.0277181 08059 Jefferson 534543 High Population 10.6287963 08061 Kiowa 1398 Low Population 0.0277977 08063 Kit Carson 8270 Low Population 0.1644398 08065 Lake 7310 Low Population 0.1453513 08071 Las Animas 15507 Medium Population 0.3083395 08067 La Plata 51334 Medium Population 1.0207198 08087 Morgan 28159 Medium Population 0.5599106 08073 Lincoln 5467 Low Population 0.1087052 08075 Logan 22709 Medium Population 0.4515433 08077 Mesa 146723 High Population 2.9174246 08079 Mineral 712 Low Population 0.0141573 08081 Moffat 13795 Medium Population 0.2742983 08083 Montezuma 25535 Medium Population 0.5077352 08085 Montrose 41276 Medium Population 0.8207276 08099 Prowers 12551 Medium Population 0.2495628 08089 Otero 18831 Medium Population 0.3744336 08091 Ouray 4436 Low Population 0.0882050 08093 Park 16206 Medium Population 0.3222384 08095 Phillips 4442 Low Population 0.0883243 08097 Pitkin 17148 Medium Population 0.3409690 08111 San Juan 699 Low Population 0.0138988 08107 Routt 23509 Medium Population 0.4674505 08109 Saguache 6108 Low Population 0.1214508 08101 Pueblo 159063 High Population 3.1627918 08103 Rio Blanco 6666 Low Population 0.1325460 08105 Rio Grande 11982 Medium Population 0.2382488 08113 San Miguel 7359 Low Population 0.1463256 08115 Sedgwick 2379 Low Population 0.0473038 08117 Summit 27994 Medium Population 0.5566297 08119 Teller 23350 Medium Population 0.4642889 08121 Washington 4814 Low Population 0.0957211 08123 Weld 252825 High Population 5.0271455 08125 Yuma 10043 Medium Population 0.1996939 08011 Bent 6499 Low Population 0.1292254 08001 Adams 441603 High Population 8.7807872 08005 Arapahoe 572003 High Population 11.3736470 08007 Archuleta 12084 Medium Population 0.2402770 08009 Baca 3788 Low Population 0.0753202 08003 Alamosa 15445 Medium Population 0.3071067 08021 Conejos 8256 Low Population 0.1641614 08013 Boulder 294567 High Population 5.8571390 08014 Broomfield 55889 Medium Population 1.1112909 08015 Chaffee 17809 Medium Population 0.3541123 08017 Cheyenne 1836 Low Population 0.0365068 08019 Clear Creek 9088 Low Population 0.1807048 08037 Eagle 52197 Medium Population 1.0378796 "],["grouping-operations-and-summary-statistics.html", "5 Grouping operations and summary statistics", " 5 Grouping operations and summary statistics usa_counties_total_rural&lt;-get_decennial(geography = &quot;county&quot;, variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year = 2010) %&gt;% rename(total_population=P001001, rural_population=P002005) View(usa_counties_total_rural) GEOID NAME total_population rural_population 05131 Sebastian County, Arkansas 125744 26170 05133 Sevier County, Arkansas 17058 10849 05135 Sharp County, Arkansas 17264 13821 05137 Stone County, Arkansas 12394 12394 05139 Union County, Arkansas 41639 22695 05141 Van Buren County, Arkansas 17295 17295 usa_counties_summary&lt;-usa_counties_total_rural %&gt;% select(total_population, rural_population) %&gt;% describe(quant=c(0.25,0.75)) %&gt;% as_tibble(rownames=&quot;variables&quot;) usa_counties_summary ## # A tibble: 2 x 16 ## variables vars n mean sd median trimmed mad min max range skew kurtosis se ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 total_po… 1 3221 97011. 3.09e5 26076 41435. 27335. 82 9.82e6 9.82e6 14.5 353. 5450. ## 2 rural_po… 2 3221 18542. 1.67e4 13878 15948. 12577. 0 1.47e5 1.47e5 1.79 4.66 293. ## # … with 2 more variables: Q0.25 &lt;dbl&gt;, Q0.75 &lt;dbl&gt; kable(usa_counties_summary) variables vars n mean sd median trimmed mad min max range skew kurtosis se Q0.25 Q0.75 total_population 1 3221 97010.66 309298.78 26076 41434.81 27334.7 82 9818605 9818523 14.502652 352.530688 5449.8287 11310 65880 rural_population 2 3221 18542.32 16651.25 13878 15948.20 12576.9 0 146856 146856 1.792136 4.659721 293.3941 6616 25292 gapminder_france_summary&lt;-gapminder_france %&gt;% select(lifeExp, pop, gdpPercap) %&gt;% describe(quant=c(0.25,0.75)) %&gt;% as_tibble(rownames=“variables”) summary(CO_counties_population_cleaned$) test&lt;-CO_county_population_2010_cleaned %&gt;% summarize(Mean_Population=mean(population), Median_Population=median(population)) "],["elementary-visualization.html", "6 Elementary Visualization", " 6 Elementary Visualization "],["advanced-data-retrieval.html", "7 Advanced data retrieval", " 7 Advanced data retrieval https://mattherman.info/blog/tidycensus-mult-year/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
