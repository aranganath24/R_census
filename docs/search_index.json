[["index.html", "Working with Census Data in R Studio 1 Introduction", " Working with Census Data in R Studio Aditya Ranganath 2022-01-25 1 Introduction "],["preliminaries.html", "2 Preliminaries", " 2 Preliminaries library(tidycensus) library(tidyverse) library(knitr) library(psych) library(stringr) library(kableExtra) library(sf) library(tmap) "],["basic-data-retrieval.html", "3 Basic Data Retrieval 3.1 Load table of variables 3.2 Query the census API, and retrieve data using tidycensus 3.3 Modify a census API call by altering arguments to the “get_decennial” function", " 3 Basic Data Retrieval 3.1 Load table of variables We begin by loading a table of decennial census variables, and assigning it to an object named decennial_variables: decennial_variables&lt;-load_variables(2010, &quot;sf1&quot;) We can print this table to the console by simply printing the object name, decennial_variables: # Print table of 2010 decennial variables to console decennial_variables ## # A tibble: 8,959 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 H001001 Total HOUSING UNITS ## 2 H002001 Total URBAN AND RURAL ## 3 H002002 Total!!Urban URBAN AND RURAL ## 4 H002003 Total!!Urban!!Inside urbanized areas URBAN AND RURAL ## 5 H002004 Total!!Urban!!Inside urban clusters URBAN AND RURAL ## 6 H002005 Total!!Rural URBAN AND RURAL ## 7 H002006 Total!!Not defined for this file URBAN AND RURAL ## 8 H003001 Total OCCUPANCY STATUS ## 9 H003002 Total!!Occupied OCCUPANCY STATUS ## 10 H003003 Total!!Vacant OCCUPANCY STATUS ## # … with 8,949 more rows To view this table in R Studio’s data viewer, pass the object to the View function: View(decennial_variables) When the data is open in the R Studio data viewer, it will look something like this: Figure 3.1: Table of 2010 census variable descriptions and codes 3.2 Query the census API, and retrieve data using tidycensus Now, let’s generate a table of population by state, based on the 2010 decennial census, and assign this new dataset to an object named state_population_2010: state_population_2010&lt;-get_decennial(geography = &quot;state&quot;, variables = &quot;P001001&quot;, year = 2010) ## Getting data from the 2010 decennial Census ## Using Census Summary File 1 As with our table of variable descriptions (decennial_variables), we can view the data by typing the object name, which prints its contents to the console: state_population_2010 ## # A tibble: 52 x 4 ## GEOID NAME variable value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama P001001 4779736 ## 2 02 Alaska P001001 710231 ## 3 04 Arizona P001001 6392017 ## 4 05 Arkansas P001001 2915918 ## 5 06 California P001001 37253956 ## 6 22 Louisiana P001001 4533372 ## 7 21 Kentucky P001001 4339367 ## 8 08 Colorado P001001 5029196 ## 9 09 Connecticut P001001 3574097 ## 10 10 Delaware P001001 897934 ## # … with 42 more rows Recall that we can also bring up the data in the R Studio data viewer using the View function: View(state_population_2010) GEOID NAME variable value 01 Alabama P001001 4779736 02 Alaska P001001 710231 04 Arizona P001001 6392017 05 Arkansas P001001 2915918 06 California P001001 37253956 22 Louisiana P001001 4533372 3.3 Modify a census API call by altering arguments to the “get_decennial” function Let’s say that instead of a dataset that contains the population for each state (based on the 2010) census, we want a dataset that contains the population for each county in the state of Colorado. We can generate this county-level dataset by simply changing the geography argument in the get_decennial function, and specifying state=\"CO\". We’ll assign this county-level population dataset for Colorado to a new object called CO_county_population_2010: # Generate dataset with information on population by county in Colorado, and assign to an object named &quot;CO_county_population_2010&quot; CO_county_population_2010&lt;-get_decennial(geography = &quot;county&quot;, state=&quot;CO&quot;, variables = &quot;P001001&quot;, year = 2010) # View dataset View(CO_county_population_2010) GEOID NAME variable value 08023 Costilla County, Colorado P001001 3524 08025 Crowley County, Colorado P001001 5823 08027 Custer County, Colorado P001001 4255 08029 Delta County, Colorado P001001 30952 08031 Denver County, Colorado P001001 600158 08035 Douglas County, Colorado P001001 285465 "],["basic-data-cleaning-and-manipulation-with-dplyr.html", "4 Basic data cleaning and manipulation with dplyr 4.1 Renaming and deleting columns 4.2 Modifying columns 4.3 Subsetting Data 4.4 Creating new variables", " 4 Basic data cleaning and manipulation with dplyr Once data has been pulled into R Studio via tidycensus, it’s possible to work with data using the entire suite of data analysis tools available through the tidyverse. Among other things, we can use tidyverse tools to clean up, modify, query, and augment the census datasets that we retrieve using tidycensus. 4.1 Renaming and deleting columns 4.1.1 The rename and select functions Let’s clean up the dataset of Colorado’s 2010 population distribution with respect to counties that we just created in the previous section (CO_county_population_2010). As a reminder, the first few rows of that dataset look like this: View(CO_county_population_2010) kable(head(CO_county_population_2010, n=6)) GEOID NAME variable value 08023 Costilla County, Colorado P001001 3524 08025 Crowley County, Colorado P001001 5823 08027 Custer County, Colorado P001001 4255 08029 Delta County, Colorado P001001 30952 08031 Denver County, Colorado P001001 600158 08035 Douglas County, Colorado P001001 285465 Let’s remove the “variable” field, and rename the “value” field as “Population”. We can perform these operations by using functions from the dplyr package, which is a part of the tidyverse. We can use the select function to remove the “variable” field, and the rename function to rename the name of the field containing the population data from “value” to “population”. We’ll use the pipe operator (%&gt;%) to chain together these functions, which allows us to perform both of these cleaning operations in one block of code; we’ll assign the revised dataset to a new object named CO_county_population_2010_cleaned: # Takes &quot;CO_county_population_2010&quot;, deletes the &quot;variable&quot; column, renames the &quot;value&quot; column as &quot;population&quot;, and assigns this modified dataset to a new object names &quot;CO_county_population_2010_cleaned&quot; CO_county_population_2010_cleaned&lt;-CO_county_population_2010 %&gt;% select(-variable) %&gt;% rename(population=value) Let’s view the dataset to ensure that these changes have been implemented: View(CO_county_population_2010_cleaned) GEOID NAME population 08023 Costilla County, Colorado 3524 08025 Crowley County, Colorado 5823 08027 Custer County, Colorado 4255 08029 Delta County, Colorado 30952 08031 Denver County, Colorado 600158 08035 Douglas County, Colorado 285465 Note that the select function can either be used to directly delete columns from a dataset (if these columns are preceded by a -) or alternatively, to designate the columns to keep (which will delete the residual columns). So, for example, the following syntax would also effectively delete the variable column, and rename the value column: # Takes &quot;CO_county_population_2010&quot;, deletes the &quot;variable&quot; column (using slightly different syntax than above), renames the &quot;value&quot; column as &quot;population&quot;, and assigns this modified dataset to a new object names &quot;CO_county_population_2010_cleaned_alternate&quot; CO_county_population_2010_cleaned_alternate&lt;-CO_county_population_2010 %&gt;% select(GEOID, NAME, value) %&gt;% rename(population=value) Let’s check to make sure that CO_county_population_cleaned_alternate looks the same as CO_county_population_cleaned above: View(CO_county_population_2010_cleaned_alternate) GEOID NAME population 08023 Costilla County, Colorado 3524 08025 Crowley County, Colorado 5823 08027 Custer County, Colorado 4255 08029 Delta County, Colorado 30952 08031 Denver County, Colorado 600158 08035 Douglas County, Colorado 285465 4.2 Modifying columns 4.2.1 Columns and string operations Note that the “Name” column in our cleaned county-level dataset of the Colorado population contains names in the format “ County, Colorado”. What if we want to edit this, such that we replace the “NAME” column with a new column named “County”, which contains simply the name of the county (i.e. &lt;“County Name”&gt; instead of &lt;“County Name&gt; County, Colorado”&gt;)? To do so, we can use the mutate function to create a new column named “County”, and then populate this column with the string that results from removing “County, Colorado” from the “NAME” column; then, we can go ahead and remove the “NAME” column. Below, instead of assigning this modified dataset to a new object, we’ll simply assign it back to CO_county_population_2010_cleaned, which overwrites that object’s existing contents with these changes: # Take the &quot;CO_county_population_2010_cleaned&quot; dataset, create a new variable named &quot;County&quot; that takes the information in the &quot;NAME&quot; column and removes the part of the string that contains &quot;County, Colorado&quot;, and then remove the now superfluous &quot;NAME&quot; column CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% mutate(County=str_remove(NAME, &quot; County, Colorado&quot;)) %&gt;% select(-NAME) # View &quot;CO_county_population_2010_cleaned&quot; (Note that only the first six records are printed in this guide) View(CO_county_population_2010_cleaned) GEOID population County 08023 3524 Costilla 08025 5823 Crowley 08027 4255 Custer 08029 30952 Delta 08031 600158 Denver 08035 285465 Douglas 4.2.2 The relocate function It’s worth noting that we can use the relocate function to reorder a dataset’s columns to our specifications. For example, note that currently, the population column is sandwiched between “GEOID” and “County”; what if we prefer that the “population” column is the last column in the dataset? We can change the column order using the relocate function, and specify the desired relative position of a given column using either the .before or .after argument: CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% relocate(population, .after=County) View(CO_county_population_2010_cleaned) GEOID County population 08023 Costilla 3524 08025 Crowley 5823 08027 Custer 4255 08029 Delta 30952 08031 Denver 600158 08035 Douglas 285465 Note that if neither the .before nor .after arguments are specified within the relocate function, the column that is passed to relocate will automatically be moved to the front of the dataset (i.e. it will be the first column). 4.3 Subsetting Data 4.3.1 The filter function dplyr also allows us to easily subset census data retrieved from tidycensus. Let’s say, for example, that we want to select only those counties in CO_county_population_2010_cleaned that have a population greater than 100,000. To do so, we can specify this condition with the appropriate logical operator within the filter function. We’ll assign this subsetted data to a new object named CO_large_counties: CO_large_counties&lt;-CO_county_population_2010_cleaned %&gt;% filter(population&gt;100000) Now, let’s view our newly created table of Colorado counties with a population of greater than 100,000: View(CO_large_counties) GEOID County population 08031 Denver 600158 08035 Douglas 285465 08041 El Paso 622263 08069 Larimer 299630 08059 Jefferson 534543 08077 Mesa 146723 08101 Pueblo 159063 08123 Weld 252825 08001 Adams 441603 08005 Arapahoe 572003 08013 Boulder 294567 Note that the table is not arranged in order, with respect to the population. Let’s reorder the dataset’s rows, in descending order with respect to the population variable (such that the most populous county appears in the first row): CO_large_counties&lt;-CO_large_counties %&gt;% arrange(desc(population)) View(CO_large_counties) GEOID County population 08041 El Paso 622263 08031 Denver 600158 08005 Arapahoe 572003 08059 Jefferson 534543 08001 Adams 441603 08069 Larimer 299630 08013 Boulder 294567 08035 Douglas 285465 08123 Weld 252825 08101 Pueblo 159063 08077 Mesa 146723 If we want to arrange the dataset in ascending order with respect to the population (such that the least populous county appears on top), we can use the following: CO_large_counties&lt;-CO_large_counties %&gt;% arrange(population) View(CO_large_counties) GEOID County population 08077 Mesa 146723 08101 Pueblo 159063 08123 Weld 252825 08035 Douglas 285465 08013 Boulder 294567 08069 Larimer 299630 08001 Adams 441603 08059 Jefferson 534543 08005 Arapahoe 572003 08031 Denver 600158 08041 El Paso 622263 It is also possible to filter based on text; for example, if we want to extract the record for Denver, we could use the following (note the double equal sign in the expression): CO_large_counties %&gt;% filter(County==&quot;Denver&quot;) ## # A tibble: 1 x 3 ## GEOID County population ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08031 Denver 600158 Note that above, we didn’t assign this subsetted record to it’s own object, but we could have easily done so. Below, let’s subset Denver and Boulder counties, and assign these records to a new object, named denver_boulder: denver_boulder&lt;-CO_large_counties %&gt;% filter(County==&quot;Denver&quot;|County==&quot;Boulder&quot;) View(denver_boulder) kable(denver_boulder) GEOID County population 08013 Boulder 294567 08031 Denver 600158 Note the syntax above; the code that reads filter(County==\"Denver\"|County==\"Boulder) specifies that we want to pull out all records where the “County” column takes on the value “Denver” OR (denoted by the |) “Boulder”. While filter is the most common function used to subset data according to specified criteria, there are others that come in handy as well. 4.3.2 slice functions It is often useful to extract rows with particularly high or low values for a given variable. This is where the slice functions of dplyr can come in handy. Let’s say we want to extract the county with the largest population in the CO_county_population_2010_cleaned dataset; we can do so by passing the “population” variable as an argument to the slice_max function: CO_county_population_2010_cleaned %&gt;% slice_max(population) ## # A tibble: 1 x 3 ## GEOID County population ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08041 El Paso 622263 If we don’t want the single largest county by population, it is easy to extract records with the “n” largest values of a variable by specifying n as an argument. For example, if we wanted the four most populous counties, we would specify n=4 after the population argument: CO_county_population_2010_cleaned %&gt;% slice_max(population, n=4) ## # A tibble: 4 x 3 ## GEOID County population ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08041 El Paso 622263 ## 2 08031 Denver 600158 ## 3 08005 Arapahoe 572003 ## 4 08059 Jefferson 534543 The slice_min function is analogous to the slice_max function, but extracts the rows associated with the “n” smallest values of a variable. For example, the code below extracts the 8 smallest counties by population (note that unlike in the slice_max example, we’ll assign the resulting subset to a new object, named CO_counties_8smallest): CO_counties_8smallest&lt;-CO_county_population_2010_cleaned %&gt;% slice_min(population, n=8) View(CO_counties_8smallest) GEOID County population 08111 San Juan 699 08079 Mineral 712 08053 Hinsdale 843 08057 Jackson 1394 08061 Kiowa 1398 08017 Cheyenne 1836 08033 Dolores 2064 08115 Sedgwick 2379 4.4 Creating new variables After retrieving a census dataset, we may want to recode variables, or generate new variables based on existing variables. For instance, perhaps we want to create a new qualitative indicator variable named “Population_Category” in the CO_county_population_2010_cleaned dataset that is coded as “High Population” if a county’s population is greater than 100,000; coded as “Medium Population” if it is between 10,000 and 100,000; and “Low Population” if it is below 10,000. CO_county_population_2010_cleaned&lt;- CO_county_population_2010_cleaned %&gt;% mutate(Population_Category=case_when(population&gt;=100000~&quot;High Population&quot;, population&lt;100000 &amp; population&gt;=10000~&quot;Medium Population&quot;, population&lt;10000~&quot;Low Population&quot;)) View(CO_county_population_2010_cleaned) GEOID County population Population_Category 08023 Costilla 3524 Low Population 08025 Crowley 5823 Low Population 08027 Custer 4255 Low Population 08029 Delta 30952 Medium Population 08031 Denver 600158 High Population 08035 Douglas 285465 High Population 08033 Dolores 2064 Low Population 08049 Grand 14843 Medium Population 08039 Elbert 23086 Medium Population 08041 El Paso 622263 High Population 08043 Fremont 46824 Medium Population 08045 Garfield 56389 Medium Population 08047 Gilpin 5441 Low Population 08069 Larimer 299630 High Population 08051 Gunnison 15324 Medium Population 08053 Hinsdale 843 Low Population 08055 Huerfano 6711 Low Population 08057 Jackson 1394 Low Population 08059 Jefferson 534543 High Population 08061 Kiowa 1398 Low Population 08063 Kit Carson 8270 Low Population 08065 Lake 7310 Low Population 08071 Las Animas 15507 Medium Population 08067 La Plata 51334 Medium Population 08087 Morgan 28159 Medium Population 08073 Lincoln 5467 Low Population 08075 Logan 22709 Medium Population 08077 Mesa 146723 High Population 08079 Mineral 712 Low Population 08081 Moffat 13795 Medium Population 08083 Montezuma 25535 Medium Population 08085 Montrose 41276 Medium Population 08099 Prowers 12551 Medium Population 08089 Otero 18831 Medium Population 08091 Ouray 4436 Low Population 08093 Park 16206 Medium Population 08095 Phillips 4442 Low Population 08097 Pitkin 17148 Medium Population 08111 San Juan 699 Low Population 08107 Routt 23509 Medium Population 08109 Saguache 6108 Low Population 08101 Pueblo 159063 High Population 08103 Rio Blanco 6666 Low Population 08105 Rio Grande 11982 Medium Population 08113 San Miguel 7359 Low Population 08115 Sedgwick 2379 Low Population 08117 Summit 27994 Medium Population 08119 Teller 23350 Medium Population 08121 Washington 4814 Low Population 08123 Weld 252825 High Population 08125 Yuma 10043 Medium Population 08011 Bent 6499 Low Population 08001 Adams 441603 High Population 08005 Arapahoe 572003 High Population 08007 Archuleta 12084 Medium Population 08009 Baca 3788 Low Population 08003 Alamosa 15445 Medium Population 08021 Conejos 8256 Low Population 08013 Boulder 294567 High Population 08014 Broomfield 55889 Medium Population 08015 Chaffee 17809 Medium Population 08017 Cheyenne 1836 Low Population 08019 Clear Creek 9088 Low Population 08037 Eagle 52197 Medium Population sum(CO_county_population_2010_cleaned$population) ## [1] 5029196 CO_county_population_2010_cleaned&lt;-CO_county_population_2010_cleaned %&gt;% mutate(county_population_concentration=((population/5029196)*100)) View(CO_county_population_2010_cleaned) GEOID County population Population_Category county_population_concentration 08023 Costilla 3524 Low Population 0.0700708 08025 Crowley 5823 Low Population 0.1157839 08027 Custer 4255 Low Population 0.0846060 08029 Delta 30952 Medium Population 0.6154463 08031 Denver 600158 High Population 11.9334780 08035 Douglas 285465 High Population 5.6761558 08033 Dolores 2064 Low Population 0.0410404 08049 Grand 14843 Medium Population 0.2951366 08039 Elbert 23086 Medium Population 0.4590396 08041 El Paso 622263 High Population 12.3730115 08043 Fremont 46824 Medium Population 0.9310435 08045 Garfield 56389 Medium Population 1.1212329 08047 Gilpin 5441 Low Population 0.1081883 08069 Larimer 299630 High Population 5.9578111 08051 Gunnison 15324 Medium Population 0.3047008 08053 Hinsdale 843 Low Population 0.0167621 08055 Huerfano 6711 Low Population 0.1334408 08057 Jackson 1394 Low Population 0.0277181 08059 Jefferson 534543 High Population 10.6287963 08061 Kiowa 1398 Low Population 0.0277977 08063 Kit Carson 8270 Low Population 0.1644398 08065 Lake 7310 Low Population 0.1453513 08071 Las Animas 15507 Medium Population 0.3083395 08067 La Plata 51334 Medium Population 1.0207198 08087 Morgan 28159 Medium Population 0.5599106 08073 Lincoln 5467 Low Population 0.1087052 08075 Logan 22709 Medium Population 0.4515433 08077 Mesa 146723 High Population 2.9174246 08079 Mineral 712 Low Population 0.0141573 08081 Moffat 13795 Medium Population 0.2742983 08083 Montezuma 25535 Medium Population 0.5077352 08085 Montrose 41276 Medium Population 0.8207276 08099 Prowers 12551 Medium Population 0.2495628 08089 Otero 18831 Medium Population 0.3744336 08091 Ouray 4436 Low Population 0.0882050 08093 Park 16206 Medium Population 0.3222384 08095 Phillips 4442 Low Population 0.0883243 08097 Pitkin 17148 Medium Population 0.3409690 08111 San Juan 699 Low Population 0.0138988 08107 Routt 23509 Medium Population 0.4674505 08109 Saguache 6108 Low Population 0.1214508 08101 Pueblo 159063 High Population 3.1627918 08103 Rio Blanco 6666 Low Population 0.1325460 08105 Rio Grande 11982 Medium Population 0.2382488 08113 San Miguel 7359 Low Population 0.1463256 08115 Sedgwick 2379 Low Population 0.0473038 08117 Summit 27994 Medium Population 0.5566297 08119 Teller 23350 Medium Population 0.4642889 08121 Washington 4814 Low Population 0.0957211 08123 Weld 252825 High Population 5.0271455 08125 Yuma 10043 Medium Population 0.1996939 08011 Bent 6499 Low Population 0.1292254 08001 Adams 441603 High Population 8.7807872 08005 Arapahoe 572003 High Population 11.3736470 08007 Archuleta 12084 Medium Population 0.2402770 08009 Baca 3788 Low Population 0.0753202 08003 Alamosa 15445 Medium Population 0.3071067 08021 Conejos 8256 Low Population 0.1641614 08013 Boulder 294567 High Population 5.8571390 08014 Broomfield 55889 Medium Population 1.1112909 08015 Chaffee 17809 Medium Population 0.3541123 08017 Cheyenne 1836 Low Population 0.0365068 08019 Clear Creek 9088 Low Population 0.1807048 08037 Eagle 52197 Medium Population 1.0378796 "],["grouping-operations-and-summary-statistics.html", "5 Grouping operations and summary statistics 5.1 Aggregate summary statistics 5.2 Summary statistics by group", " 5 Grouping operations and summary statistics 5.1 Aggregate summary statistics usa_counties_total_rural&lt;-get_decennial(geography = &quot;county&quot;, variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year = 2010) %&gt;% rename(total_population=P001001, rural_population=P002005) View(usa_counties_total_rural) GEOID NAME total_population rural_population 05131 Sebastian County, Arkansas 125744 26170 05133 Sevier County, Arkansas 17058 10849 05135 Sharp County, Arkansas 17264 13821 05137 Stone County, Arkansas 12394 12394 05139 Union County, Arkansas 41639 22695 05141 Van Buren County, Arkansas 17295 17295 usa_counties_summary&lt;-usa_counties_total_rural %&gt;% select(total_population, rural_population) %&gt;% describe() %&gt;% as_tibble(rownames=&quot;variable&quot;) usa_counties_summary ## # A tibble: 2 x 14 ## variable vars n mean sd median trimmed mad min max range skew kurtosis se ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 total_popula… 1 3221 97011. 309299. 26076 41435. 27335. 82 9.82e6 9.82e6 14.5 353. 5450. ## 2 rural_popula… 2 3221 18542. 16651. 13878 15948. 12577. 0 1.47e5 1.47e5 1.79 4.66 293. variable vars n mean sd median trimmed mad min max range skew kurtosis se total_population 1 3221 97010.66 309298.78 26076 41434.81 27334.7 82 9818605 9818523 14.502652 352.530688 5449.8287 rural_population 2 3221 18542.32 16651.25 13878 15948.20 12576.9 0 146856 146856 1.792136 4.659721 293.3941 usa_counties_summary&lt;-usa_counties_summary %&gt;% select(variable, n, mean, sd, median, , min, max, range) variable n mean sd median min max range total_population 3221 97010.66 309298.78 26076 82 9818605 9818523 rural_population 3221 18542.32 16651.25 13878 0 146856 146856 5.2 Summary statistics by group Create separate state field usa_counties_states_total_rural&lt;-usa_counties_total_rural %&gt;% separate(NAME, into=c(&quot;County&quot;, &quot;State&quot;), sep=&quot;, &quot;) GEOID County State total_population rural_population 05131 Sebastian County Arkansas 125744 26170 05133 Sevier County Arkansas 17058 10849 05135 Sharp County Arkansas 17264 13821 05137 Stone County Arkansas 12394 12394 05139 Union County Arkansas 41639 22695 05141 Van Buren County Arkansas 17295 17295 Summary statistics by group group_summary&lt;-usa_counties_states_total_rural %&gt;% group_by(State) %&gt;% summarise(number_counties=n(), mean_county_pop=mean(total_population), median_county_pop=median(total_population), mean_county_rural_pop=mean(rural_population), median_rural_county_population=median(rural_population)) State number_counties mean_county_pop median_county_pop mean_county_rural_pop median_rural_county_population Alabama 67 71339.34 34339.0 29222.866 22921.0 Alaska 29 24490.72 7029.0 8322.000 4847.0 Arizona 15 426134.47 131346.0 43423.867 45970.0 Arkansas 75 38878.91 19019.0 17044.387 13821.0 California 58 642309.59 179140.5 32419.828 25167.5 Colorado 64 78581.19 15083.5 10881.797 6642.0 Connecticut 8 446762.12 231991.0 53644.375 53347.0 Delaware 3 299311.33 197145.0 49995.000 43774.0 District of Columbia 1 601723.00 601723.0 0.000 0.0 Florida 67 280616.57 98786.0 24798.000 20262.0 Georgia 159 60928.64 22598.0 15191.836 13657.0 Hawaii 5 272060.20 154834.0 21962.400 8628.0 Idaho 44 35626.86 13014.0 10482.091 8411.0 Illinois 102 125790.51 27315.5 14481.167 12556.0 Indiana 92 70476.11 33844.0 19420.674 18210.5 Iowa 99 30771.26 15679.0 11071.707 10203.0 Kansas 105 27172.55 7053.0 7011.019 4861.0 Kentucky 120 36161.39 18751.0 15050.200 13413.5 Louisiana 64 70833.94 33685.5 18993.234 16952.0 Maine 16 83022.56 53323.0 50926.188 44369.0 Maryland 24 240564.67 103129.5 30800.875 25761.5 Massachusetts 14 467687.79 479204.5 37545.714 39287.0 Michigan 83 119080.00 38520.0 30285.337 23884.0 Minnesota 87 60964.66 21676.0 16294.414 13387.0 Mississippi 82 36186.55 22989.5 18330.159 16897.0 Missouri 115 52077.63 18956.0 15396.139 11368.0 Montana 56 17668.12 7198.0 7792.875 4238.0 Nebraska 93 19638.08 6274.0 5275.860 4260.0 Nevada 17 158855.94 16528.0 9220.824 6260.0 New Hampshire 10 131647.00 83117.5 52259.800 46635.5 New Jersey 21 418661.62 448734.0 22274.667 18736.0 New Mexico 33 62399.36 27213.0 14085.394 11226.0 New York 62 312550.03 91301.0 37903.177 36800.0 North Carolina 100 95354.83 55621.5 32337.270 28833.5 North Dakota 53 12690.40 4153.0 5089.038 4007.0 Ohio 88 131096.64 58185.5 28941.023 26931.0 Oklahoma 77 48718.84 22119.0 16445.740 11572.0 Oregon 36 106418.72 41536.5 20185.889 15093.0 Pennsylvania 67 189587.75 88880.0 40464.060 36733.0 Puerto Rico 78 47766.53 35343.0 2981.192 2431.5 Rhode Island 5 210513.40 126979.0 19504.800 13270.0 South Carolina 46 100551.39 57750.0 33859.891 29681.5 South Dakota 66 12336.06 5369.5 5347.470 4172.0 Tennessee 95 66801.11 31807.0 22451.158 21747.0 Texas 254 98998.27 18381.0 15147.724 9757.5 Utah 29 95306.38 20802.0 8975.517 9245.0 Vermont 14 44695.79 36973.0 27311.143 28508.0 Virginia 134 59709.13 24544.0 14656.194 13133.5 Washington 39 172424.10 60699.0 27504.385 19725.0 West Virginia 55 33690.80 24069.0 17276.073 17541.0 Wisconsin 72 78985.92 41384.0 23574.278 22224.0 Wyoming 23 24505.48 15885.0 8636.217 7658.0 "],["elementary-visualization.html", "6 Elementary Visualization 6.1 Census data visualization with ggplot 6.2 Spatial visualization with tmap", " 6 Elementary Visualization 6.1 Census data visualization with ggplot Make a graph that visually conveys the median age in Colorado, by county, based on the 2010 census. median_age_CO&lt;- get_decennial(geography = &quot;county&quot;, state=&quot;CO&quot;, variables = &quot;P013001&quot;, geometry=TRUE, year = 2010) %&gt;% rename(median_age=value) %&gt;% mutate(County=str_remove(NAME, &quot; County, Colorado&quot;)) %&gt;% select(-NAME) View(median_age_CO) GEOID variable median_age geometry County 08053 P013001 47.1 MULTIPOLYGON (((-107.2116 3… Hinsdale 08061 P013001 47.4 MULTIPOLYGON (((-102.1985 3… Kiowa 08063 P013001 39.7 MULTIPOLYGON (((-102.0498 3… Kit Carson 08071 P013001 43.9 MULTIPOLYGON (((-104.4804 3… Las Animas 08073 P013001 40.9 MULTIPOLYGON (((-103.7149 3… Lincoln 08075 P013001 38.4 MULTIPOLYGON (((-102.9049 4… Logan median_age_CO_cleaned_visualization&lt;- median_age_CO %&gt;% ggplot(aes(x = median_age, y = reorder(County, median_age))) + geom_point()+ labs(title=&quot;Median Age by County, CO&quot;, x=&quot;Median Age&quot;, y=&quot;County&quot;, caption=&quot;Source: United States census accessed via tidycensus&quot;)+ theme(plot.title=element_text(hjust=0.5), plot.caption=element_text(size=5)) median_age_CO_cleaned_visualization 6.2 Spatial visualization with tmap median_age_CO_map&lt;- tm_shape(median_age_CO)+ tm_polygons(col=&quot;median_age&quot;, breaks=c(30,35,40,45,50), palette=&quot;YlGnBu&quot;, midpoint=TRUE)+ tm_layout(frame=FALSE, main.title=&quot;Median Age by County,\\nColorado&quot;, main.title.position=&quot;left&quot;, legend.outside=TRUE, attr.outside=TRUE)+ tm_credits(&quot;Source: US Census via tidycensus&quot;, position=c(&quot;right&quot;, &quot;bottom&quot;)) median_age_CO_map "],["functions-and-iteration.html", "7 Functions and Iteration 7.1 Automate creation of county-level median age graphs 7.2 Automate creation of median-age maps", " 7 Functions and Iteration 7.1 Automate creation of county-level median age graphs 7.1.1 Write county-level median age graph function Write a function to create a median age graph for a given state, based on two inputs: the 2 letter state abbreviation (used in the tidycensus call) and state name (used to label the graph) # Write median age graph function median_age_graph&lt;-function(state_abbrev, state_full_name){ census_call&lt;-get_decennial(geography = &quot;county&quot;, state=state_abbrev, variables = &quot;P013001&quot;, geometry=TRUE, year = 2010) %&gt;% rename(median_age=value) %&gt;% mutate(County=str_remove(NAME, paste0(&quot; County,&quot;, &quot; &quot;, state_full_name))) %&gt;% select(-NAME) median_age_ggplot&lt;- census_call %&gt;% ggplot(aes(x = median_age, y = reorder(County, median_age))) + geom_point()+ labs(title=paste0(&quot;Median Age by County,&quot;, &quot; &quot;, state_full_name), x=&quot;Median Age&quot;, y=&quot;County&quot;, caption=&quot;Source: United States census accessed via tidycensus&quot;)+ theme(plot.title=element_text(hjust=0.5), plot.caption=element_text(size=5)) return(median_age_ggplot) } # Test function for New Mexico median_age_graph(&quot;NM&quot;, &quot;New Mexico&quot;) 7.1.2 Iteratively apply median_age_graph function to multiple input elements Apply the median_age_graph function iteratively to New Mexico, Utah, Arizona, and Wyoming, thereby creating median age graphs for all these states; create a list to contain each of these output graphs as a separate list element # Create input vectors state_codes&lt;-c(&quot;NM&quot;, &quot;UT&quot;, &quot;AZ&quot;, &quot;WY&quot;) state_names&lt;-c(&quot;New Mexico&quot;, &quot;Utah&quot;, &quot;Arizona&quot;, &quot;Wyoming&quot;) # Applies the &quot;median_age_graph&quot; function to multiple inputs (specified by the input vectors), and then places the outputs (i.e. median age graphs for New Mexico, Utah, Arizona, and Wyoming) in a list assigned to an object named &quot;county_age_graphs_list&quot; county_age_graphs_list&lt;-map2(.x=state_codes, .y=state_names, .f=median_age_graph) ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;35&#39; for state &#39;NM&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;04&#39; for state &#39;AZ&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;56&#39; for state &#39;WY&#39; ## Using Census Summary File 1 # Open the list that contains the median age graphs county_age_graphs_list ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] # Extract the Arizona graph by its index county_age_graphs_list %&gt;% pluck(3) # Attach names to list elements and extract by name; for convenience, we&#39;ll name list elements based on &quot;state_codes&quot; vector names(county_age_graphs_list)&lt;-state_codes # Extract the Wyoming graph by its name county_age_graphs_list %&gt;% pluck(&quot;WY&quot;) 7.2 Automate creation of median-age maps 7.2.1 Write function to create county-level median age maps Write a function to create a county-level median age map for a given state, based on two inputs: the 2 letter state abbreviation (used in the tidycensus call) and state name (used to label the map) # Write function to create county-level median age map for a given state median_age_map&lt;-function(state_abbrev, state_full_name){ census_call&lt;-get_decennial(geography = &quot;county&quot;, state=state_abbrev, variables = &quot;P013001&quot;, geometry=TRUE, year = 2010) %&gt;% rename(median_age=value) %&gt;% mutate(County=str_remove(NAME, paste0(&quot; County,&quot;, &quot; &quot;, state_full_name))) %&gt;% select(-NAME) county_median_age_map&lt;- tm_shape(census_call)+ tm_polygons(col=&quot;median_age&quot;, style=&quot;jenks&quot;, palette=&quot;YlGnBu&quot;, midpoint=TRUE)+ tm_layout(frame=FALSE, main.title=paste0(&quot;Median Age by County,\\n&quot;, state_full_name), main.title.position=&quot;left&quot;, legend.outside=TRUE, attr.outside=TRUE)+ tm_credits(&quot;Source: US Census via tidycensus&quot;, position=c(&quot;right&quot;, &quot;bottom&quot;)) return(county_median_age_map) } # Test function for New Mexico median_age_map(&quot;NM&quot;, &quot;New Mexico&quot;) 7.2.2 Iteratively apply median_age_map function to multiple input elements # Create input vectors state_codes&lt;-c(&quot;NM&quot;, &quot;UT&quot;, &quot;AZ&quot;, &quot;WY&quot;) state_names&lt;-c(&quot;New Mexico&quot;, &quot;Utah&quot;, &quot;Arizona&quot;, &quot;Wyoming&quot;) # Applies the &quot;median_age_map&quot; function to multiple inputs (specified by the input vectors), and then places the outputs (i.e. median age maps for New Mexico, Utah, Arizona, and Wyoming) in a list assigned to an object named &quot;county_age_maps_list&quot; county_age_maps_list&lt;-map2(.x=state_codes, .y=state_names,median_age_map) ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;35&#39; for state &#39;NM&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;04&#39; for state &#39;AZ&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using FIPS code &#39;56&#39; for state &#39;WY&#39; ## Using Census Summary File 1 # Open the list that contains the median age maps county_age_maps_list ## [[1]] ## Credits not supported in view mode. ## ## [[2]] ## Credits not supported in view mode. ## ## [[3]] ## Credits not supported in view mode. ## ## [[4]] ## Credits not supported in view mode. # Extract the Utah map by its index county_age_maps_list %&gt;% pluck(2) ## Credits not supported in view mode. # Attach names (based on &quot;state_codes&quot; vector) to &quot;county_age_maps_list&quot; list elements names(county_age_maps_list)&lt;-state_codes # Extract the Arizona map by name county_age_maps_list %&gt;% pluck(&quot;AZ&quot;) ## Credits not supported in view mode. "],["advanced-data-retrieval.html", "8 Advanced data retrieval 8.1 Retrieving data from multiple census years 8.2 Retrieving microgeography data from multiple states 8.3 Retrieving microgeography data from multiple states AND multiple years", " 8 Advanced data retrieval # Use tidycensus to extract tract-level data from Colorado and Utah on population (P001001) and rural population (P002005) based on 2000 decennial census; assigns data to object named &quot;population_rural_CO_UT&quot; population_rural_CO_UT&lt;-get_decennial(geography = &quot;tract&quot;, state=c(&quot;CO&quot;, &quot;UT&quot;), variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year = 2000) ## Getting data from the 2000 decennial Census 8.1 Retrieving data from multiple census years # Attempts to extract state level data (for all US states) on population (P001001) and rural population (P002005) based on 2000 decennial census and 2010 decennial census, and assign to new object named &quot;population_rural_2000_2010&quot; population_rural_2000_2010&lt;-get_decennial(geography = &quot;state&quot;, variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year = c(2000,2010)) ## Getting data from the 2000 decennial CensusGetting data from the 2010 decennial Census ## Warning in if (year == 2020) {: the condition has length &gt; 1 and only the first element will be used ## Warning in if (year == 1990) {: the condition has length &gt; 1 and only the first element will be used ## Warning in if (year == 1990) {: the condition has length &gt; 1 and only the first element will be used ## Warning in if (year == 1990) {: the condition has length &gt; 1 and only the first element will be used ## Error in parse_url(url) : length(url) == 1 is not TRUE ## Variables not found in Summary File 1. Trying Summary File 3... ## Error in UseMethod(&quot;select&quot;): no applicable method for &#39;select&#39; applied to an object of class &quot;character&quot; 8.1.1 Retrieving different census year datasets and placing them as separate elements in a list # Creates function that takes a given year as an input, and uses tidycensus to extract a state-level dataset of population (P001001) and rural population (P002005) for the specified year; the output dataset also includes new columns containing the state&#39;s rural population as a percentage of the overall population (&quot;rural_pct&quot;) and the year to which the data corresponds (&quot;year&quot;); the function is assigned to a new object named &quot;census_query&quot; census_query&lt;-function(desired_year){ get_decennial(geography = &quot;state&quot;, variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year=desired_year) %&gt;% mutate(rural_pct=(P002005/P001001)*100) %&gt;% mutate(year=desired_year) } # Test the &quot;census_query&quot; object for the year 2000 census_query(2000) ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4447100 1981427 44.6 2000 ## 2 02 Alaska 626932 215675 34.4 2000 ## 3 04 Arizona 5130632 607097 11.8 2000 ## 4 05 Arkansas 2673400 1269221 47.5 2000 ## 5 06 California 33871648 1881985 5.56 2000 ## 6 08 Colorado 4301261 668076 15.5 2000 ## 7 09 Connecticut 3405565 417506 12.3 2000 ## 8 10 Delaware 783600 155842 19.9 2000 ## 9 11 District of Columbia 572059 0 0 2000 ## 10 12 Florida 15982378 1712358 10.7 2000 ## # … with 42 more rows # Creates a new vector, assigned to an object named &quot;my_years&quot;, containing the years for which we want to extract data my_years&lt;-c(2000,2010) # Applies the &quot;census_query&quot; function to the inputs specified by the &quot;my_years&quot; vector, and deposits the two resulting datasets (one from 2000 and the other from 2010) as distinct elements in a list assigned to an object named population_rural_2000_2010_list population_rural_2000_2010_list&lt;-map(.x=my_years, .f=census_query) ## Getting data from the 2000 decennial Census ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using Census Summary File 1 # Prints the contents of &quot;population_rural_2000_2010_list&quot; population_rural_2000_2010_list ## [[1]] ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4447100 1981427 44.6 2000 ## 2 02 Alaska 626932 215675 34.4 2000 ## 3 04 Arizona 5130632 607097 11.8 2000 ## 4 05 Arkansas 2673400 1269221 47.5 2000 ## 5 06 California 33871648 1881985 5.56 2000 ## 6 08 Colorado 4301261 668076 15.5 2000 ## 7 09 Connecticut 3405565 417506 12.3 2000 ## 8 10 Delaware 783600 155842 19.9 2000 ## 9 11 District of Columbia 572059 0 0 2000 ## 10 12 Florida 15982378 1712358 10.7 2000 ## # … with 42 more rows ## ## [[2]] ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4779736 1957932 41.0 2010 ## 2 02 Alaska 710231 241338 34.0 2010 ## 3 04 Arizona 6392017 651358 10.2 2010 ## 4 05 Arkansas 2915918 1278329 43.8 2010 ## 5 06 California 37253956 1880350 5.05 2010 ## 6 22 Louisiana 4533372 1215567 26.8 2010 ## 7 21 Kentucky 4339367 1806024 41.6 2010 ## 8 08 Colorado 5029196 696435 13.8 2010 ## 9 09 Connecticut 3574097 429155 12.0 2010 ## 10 10 Delaware 897934 149985 16.7 2010 ## # … with 42 more rows # Extracts the first list element (the 2000 dataset) from the list using its index population_rural_2000_2010_list %&gt;% pluck(1) ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4447100 1981427 44.6 2000 ## 2 02 Alaska 626932 215675 34.4 2000 ## 3 04 Arizona 5130632 607097 11.8 2000 ## 4 05 Arkansas 2673400 1269221 47.5 2000 ## 5 06 California 33871648 1881985 5.56 2000 ## 6 08 Colorado 4301261 668076 15.5 2000 ## 7 09 Connecticut 3405565 417506 12.3 2000 ## 8 10 Delaware 783600 155842 19.9 2000 ## 9 11 District of Columbia 572059 0 0 2000 ## 10 12 Florida 15982378 1712358 10.7 2000 ## # … with 42 more rows # Names the list elements based on the input years (i.e. the years in &quot;my_years&quot;) names(population_rural_2000_2010_list)&lt;-my_years # prints &quot;population_rural_2000_2010_list&quot;; notice the list elements are now named after the years to which they correspond population_rural_2000_2010_list ## $`2000` ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4447100 1981427 44.6 2000 ## 2 02 Alaska 626932 215675 34.4 2000 ## 3 04 Arizona 5130632 607097 11.8 2000 ## 4 05 Arkansas 2673400 1269221 47.5 2000 ## 5 06 California 33871648 1881985 5.56 2000 ## 6 08 Colorado 4301261 668076 15.5 2000 ## 7 09 Connecticut 3405565 417506 12.3 2000 ## 8 10 Delaware 783600 155842 19.9 2000 ## 9 11 District of Columbia 572059 0 0 2000 ## 10 12 Florida 15982378 1712358 10.7 2000 ## # … with 42 more rows ## ## $`2010` ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4779736 1957932 41.0 2010 ## 2 02 Alaska 710231 241338 34.0 2010 ## 3 04 Arizona 6392017 651358 10.2 2010 ## 4 05 Arkansas 2915918 1278329 43.8 2010 ## 5 06 California 37253956 1880350 5.05 2010 ## 6 22 Louisiana 4533372 1215567 26.8 2010 ## 7 21 Kentucky 4339367 1806024 41.6 2010 ## 8 08 Colorado 5029196 696435 13.8 2010 ## 9 09 Connecticut 3574097 429155 12.0 2010 ## 10 10 Delaware 897934 149985 16.7 2010 ## # … with 42 more rows # Extracts the 2010 dataset from &quot;population_rural_2000_2010_list&quot; using its newly assigned name population_rural_2000_2010_list %&gt;% pluck(&quot;2010&quot;) ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4779736 1957932 41.0 2010 ## 2 02 Alaska 710231 241338 34.0 2010 ## 3 04 Arizona 6392017 651358 10.2 2010 ## 4 05 Arkansas 2915918 1278329 43.8 2010 ## 5 06 California 37253956 1880350 5.05 2010 ## 6 22 Louisiana 4533372 1215567 26.8 2010 ## 7 21 Kentucky 4339367 1806024 41.6 2010 ## 8 08 Colorado 5029196 696435 13.8 2010 ## 9 09 Connecticut 3574097 429155 12.0 2010 ## 10 10 Delaware 897934 149985 16.7 2010 ## # … with 42 more rows # Note that even if a list element is named, you can still extract it using its index, rather than its name population_rural_2000_2010_list %&gt;% pluck(2) ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4779736 1957932 41.0 2010 ## 2 02 Alaska 710231 241338 34.0 2010 ## 3 04 Arizona 6392017 651358 10.2 2010 ## 4 05 Arkansas 2915918 1278329 43.8 2010 ## 5 06 California 37253956 1880350 5.05 2010 ## 6 22 Louisiana 4533372 1215567 26.8 2010 ## 7 21 Kentucky 4339367 1806024 41.6 2010 ## 8 08 Colorado 5029196 696435 13.8 2010 ## 9 09 Connecticut 3574097 429155 12.0 2010 ## 10 10 Delaware 897934 149985 16.7 2010 ## # … with 42 more rows 8.1.2 Retrieving different census year datasets and placing them in a single data frame # Applies the &quot;census_query&quot; function to the inputs specified by the &quot;my_years&quot; vector, and deposits the resulting census datasets (one from 2000 and the other from 2010) into a single data frame assigned to an object named &quot;population_rural_2000_2010_df&quot; population_rural_2000_2010_df&lt;-map_dfr(.x=my_years, .f=census_query) %&gt;% arrange(GEOID) # prints the first few records of &quot;population_rural_2000_2010_df&quot; population_rural_2000_2010_df ## # A tibble: 104 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4447100 1981427 44.6 2000 ## 2 01 Alabama 4779736 1957932 41.0 2010 ## 3 02 Alaska 626932 215675 34.4 2000 ## 4 02 Alaska 710231 241338 34.0 2010 ## 5 04 Arizona 5130632 607097 11.8 2000 ## 6 04 Arizona 6392017 651358 10.2 2010 ## 7 05 Arkansas 2673400 1269221 47.5 2000 ## 8 05 Arkansas 2915918 1278329 43.8 2010 ## 9 06 California 33871648 1881985 5.56 2000 ## 10 06 California 37253956 1880350 5.05 2010 ## # … with 94 more rows 8.2 Retrieving microgeography data from multiple states # Attempts to retrieve tract-level data on overall population (P001001) and rural population (P002005) from Colorado and Utah, based on the 2000 decennial census; then, creates a new variable named &quot;rural_pct&quot; that captures each tracts rural share of the overall population, as well as a new variable named &quot;rural_pct&quot; population_rural_CO_UT&lt;-get_decennial(geography = &quot;tract&quot;, state=c(&quot;CO&quot;,&quot;UT&quot;), variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year=2000) %&gt;% mutate(rural_pct=(P002005/P001001)*100) ## Getting data from the 2000 decennial Census 8.2.1 Retrieving microgeography datasets for multiple states and placing datasets into a list # Creates a function assigned to an object named &quot;population_rural_statetract&quot; that takes a given state input (&quot;desired_state), and passes this state into tidycensus&#39;s &quot;get_decennial&quot; function to retrieve a tract-level dataset for that state containing data on overall population (P001001) and rural population (P002005) based on the 2010 decennial census, while also creating three new variables: &quot;rural_pct&quot; (the percentage of the overall population that is rural), &quot;Year&quot; (a varaiable that takes on the value 2010, so that we can readily identify that the data corresponds to the year 2010), and &quot;STATE&quot; (an ID variable that will take on the value of the state input, so that we can readily identify the state for which the data has been extracted) population_rural_statetract&lt;-function(desired_state){ get_decennial(geography = &quot;tract&quot;, state=desired_state, variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year=2010) %&gt;% mutate(rural_pct=(P002005/P001001)*100) %&gt;% mutate(Year=2010) %&gt;% mutate(STATE=desired_state) } # Test the function for a given state; here, California (&quot;CA) population_rural_statetract(&quot;CA&quot;) ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;06&#39; for state &#39;CA&#39; ## Using Census Summary File 1 ## # A tibble: 8,057 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 06037434004 Census Tract 4340.04, Los Angeles County, California 2796 0 0 2010 CA ## 2 06037460000 Census Tract 4600, Los Angeles County, California 4851 0 0 2010 CA ## 3 06037460200 Census Tract 4602, Los Angeles County, California 5315 0 0 2010 CA ## 4 06037460301 Census Tract 4603.01, Los Angeles County, California 4638 0 0 2010 CA ## 5 06037460302 Census Tract 4603.02, Los Angeles County, California 4442 0 0 2010 CA ## 6 06037460401 Census Tract 4604.01, Los Angeles County, California 878 0 0 2010 CA ## 7 06037621301 Census Tract 6213.01, Los Angeles County, California 6769 0 0 2010 CA ## 8 06037621324 Census Tract 6213.24, Los Angeles County, California 3842 0 0 2010 CA ## 9 06037621326 Census Tract 6213.26, Los Angeles County, California 3260 0 0 2010 CA ## 10 06037621400 Census Tract 6214, Los Angeles County, California 4414 0 0 2010 CA ## # … with 8,047 more rows Now that we know the function works, let’s apply it to extract our desired dataset for Colorado and Utah, and place these datasets into a list: # define a vector of desired states and assign it to an object named &quot;my_states&quot; my_states&lt;-c(&quot;CO&quot;, &quot;UT&quot;) # Applies the &quot;population_rural_state_tract&quot; function to the inputs specified by the &quot;my_states&quot; vector, and deposits the two resulting datasets (one for CO, and the other for UT) as distinct elements in a list assigned to an object named population_rural_CO_UT_list population_rural_CO_UT_list&lt;-map(.x=my_states, .f=population_rural_statetract) ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 # Prints the contents of &quot;population_rural_CO_UT_list&quot; population_rural_CO_UT_list ## [[1]] ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows ## ## [[2]] ## # A tibble: 588 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49011125805 Census Tract 1258.05, Davis County, Utah 6167 0 0 2010 UT ## 2 49011125301 Census Tract 1253.01, Davis County, Utah 5108 0 0 2010 UT ## 3 49011125305 Census Tract 1253.05, Davis County, Utah 6152 0 0 2010 UT ## 4 49011125702 Census Tract 1257.02, Davis County, Utah 3839 0 0 2010 UT ## 5 49011125801 Census Tract 1258.01, Davis County, Utah 6703 0 0 2010 UT ## 6 49011125804 Census Tract 1258.04, Davis County, Utah 6377 0 0 2010 UT ## 7 49011125807 Census Tract 1258.07, Davis County, Utah 3114 0 0 2010 UT ## 8 49011125808 Census Tract 1258.08, Davis County, Utah 5616 0 0 2010 UT ## 9 49011125905 Census Tract 1259.05, Davis County, Utah 6156 0 0 2010 UT ## 10 49011125906 Census Tract 1259.06, Davis County, Utah 6987 0 0 2010 UT ## # … with 578 more rows # Use the &quot;pluck&quot; function to extract the Colorado dataset from &quot;population_rural_CO_UT_list&quot; by its index population_rural_CO_UT_list %&gt;% pluck(1) ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows # Name the list elements in &quot;population_rural_CO_UT_list&quot; based on the &quot;my_states&quot; vector names(population_rural_CO_UT_list)&lt;-my_states # Print &quot;population_rural_CO_UT_list&quot; list contents; notice that they&#39;re now named based on the state population_rural_CO_UT_list ## $CO ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows ## ## $UT ## # A tibble: 588 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49011125805 Census Tract 1258.05, Davis County, Utah 6167 0 0 2010 UT ## 2 49011125301 Census Tract 1253.01, Davis County, Utah 5108 0 0 2010 UT ## 3 49011125305 Census Tract 1253.05, Davis County, Utah 6152 0 0 2010 UT ## 4 49011125702 Census Tract 1257.02, Davis County, Utah 3839 0 0 2010 UT ## 5 49011125801 Census Tract 1258.01, Davis County, Utah 6703 0 0 2010 UT ## 6 49011125804 Census Tract 1258.04, Davis County, Utah 6377 0 0 2010 UT ## 7 49011125807 Census Tract 1258.07, Davis County, Utah 3114 0 0 2010 UT ## 8 49011125808 Census Tract 1258.08, Davis County, Utah 5616 0 0 2010 UT ## 9 49011125905 Census Tract 1259.05, Davis County, Utah 6156 0 0 2010 UT ## 10 49011125906 Census Tract 1259.06, Davis County, Utah 6987 0 0 2010 UT ## # … with 578 more rows # Use the &quot;pluck&quot; function to extract the Utah dataset from &quot;population_rural_CO_UT_list&quot; by name population_rural_CO_UT_list %&gt;% pluck(&quot;UT&quot;) ## # A tibble: 588 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49011125805 Census Tract 1258.05, Davis County, Utah 6167 0 0 2010 UT ## 2 49011125301 Census Tract 1253.01, Davis County, Utah 5108 0 0 2010 UT ## 3 49011125305 Census Tract 1253.05, Davis County, Utah 6152 0 0 2010 UT ## 4 49011125702 Census Tract 1257.02, Davis County, Utah 3839 0 0 2010 UT ## 5 49011125801 Census Tract 1258.01, Davis County, Utah 6703 0 0 2010 UT ## 6 49011125804 Census Tract 1258.04, Davis County, Utah 6377 0 0 2010 UT ## 7 49011125807 Census Tract 1258.07, Davis County, Utah 3114 0 0 2010 UT ## 8 49011125808 Census Tract 1258.08, Davis County, Utah 5616 0 0 2010 UT ## 9 49011125905 Census Tract 1259.05, Davis County, Utah 6156 0 0 2010 UT ## 10 49011125906 Census Tract 1259.06, Davis County, Utah 6987 0 0 2010 UT ## # … with 578 more rows 8.2.2 Retrieving microgeography data from multiple states and placing them into the same data frame # Applies the &quot;population_rural_statetract&quot; function to the inputs specified by the &quot;my_states&quot; vector, and deposits the resulting census datasets (one CO and the other UT) into a single data frame assigned to an object named &quot;population_rural_CO_UT_df&quot; population_rural_CO_UT_df&lt;-map_dfr(.x=my_states, .f=population_rural_statetract) ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 # Prints the contents of &quot;population_rural_CO_UT_df&quot; population_rural_CO_UT_df ## # A tibble: 1,837 x 7 ## GEOID NAME P001001 P002005 rural_pct Year STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,827 more rows 8.3 Retrieving microgeography data from multiple states AND multiple years We can use the same principles to extract census datasets at sub-state geographies for multiple states, across from multiple years. 8.3.1 Retrieving data from multiple years, for multiple states, and placing the datasets from the various state/year combinations into a list # Define a function (assigned to an object named &quot;population_rural_statetract_year&quot;) that takes a state input (&quot;desired_state&quot;) and a year input (&quot;desired_year), and returns a tract level dataset for that state and census year which contains variables specifying the total population, and the rural population, while also creating three new variables: &quot;rural_pct&quot; (the percentage of the overall tract population that is rural), &quot;YEAR&quot; (a varaiable that takes on the value of the input, so that we can readily identify what year the data corresponds to), and &quot;STATE&quot; (an ID variable that will take on the value of the state input, so that we can readily identify the state for which the data has been extracted) population_rural_statetract_year&lt;-function(desired_state, desired_year){ get_decennial(geography = &quot;tract&quot;, state=desired_state, variables = c(&quot;P001001&quot;, &quot;P002005&quot;), output=&quot;wide&quot;, year=desired_year) %&gt;% mutate(rural_pct=(P002005/P001001)*100) %&gt;% mutate(YEAR=desired_year) %&gt;% mutate(STATE=desired_state) } # Tests the &quot;population_rural_CO_UT_2000_2010&quot; function for Virginia, for the 2010 census population_rural_statetract_year(&quot;VA&quot;, 2010) ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;51&#39; for state &#39;VA&#39; ## Using Census Summary File 1 ## # A tibble: 1,907 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 51059421200 Census Tract 4212, Fairfax County, Virginia 1926 0 0 2010 VA ## 2 51059421400 Census Tract 4214, Fairfax County, Virginia 7158 0 0 2010 VA ## 3 51059421600 Census Tract 4216, Fairfax County, Virginia 6342 0 0 2010 VA ## 4 51059421702 Census Tract 4217.02, Fairfax County, Virginia 4054 0 0 2010 VA ## 5 51059421800 Census Tract 4218, Fairfax County, Virginia 5862 0 0 2010 VA ## 6 51059421900 Census Tract 4219, Fairfax County, Virginia 2216 0 0 2010 VA ## 7 51059422000 Census Tract 4220, Fairfax County, Virginia 3439 0 0 2010 VA ## 8 51059422102 Census Tract 4221.02, Fairfax County, Virginia 6101 0 0 2010 VA ## 9 51059422201 Census Tract 4222.01, Fairfax County, Virginia 3394 0 0 2010 VA ## 10 51059422202 Census Tract 4222.02, Fairfax County, Virginia 5518 0 0 2010 VA ## # … with 1,897 more rows Now, we can iteratively apply the population_rural_statetract_year function to multiple state/year inputs. In the example below, we use population_rural_statetract_year to extract data from the 2000 and 2010 censuses, for both Colorado and Utah, and deposit the resulting four datasets (CO/2000, CO/2010, UT/2000, UT/2010) into a list # define a vector of desired states to iterate over, and assign it to an obejct named &quot;my_states&quot; my_states&lt;-c(&quot;CO&quot;, &quot;CO&quot;, &quot;UT&quot;, &quot;UT&quot;) # define a vector of desired years to iterate over, and assign it to an object named &quot;my_years&quot; my_years&lt;-c(2000, 2010, 2000, 2010) # Applies the &quot;population_rural_statetract_year&quot; function to the inputs specified by the &quot;my_states&quot; and &quot;my_year&quot; vectors, and deposits the resulting four census datasets (one for CO 2000; one for CO 2010; one for UT 2000; one for UT 2010) as distinct elements in a list that is assigned to an object named &quot;population_rural_CO_UT_2000_2010_list&quot; population_rural_CO_UT_2000_2010_list&lt;-map2(.x=my_states, .y=my_years, .f=population_rural_statetract_year) ## Getting data from the 2000 decennial Census ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; ## Using Census Summary File 1 ## Getting data from the 2000 decennial Census ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 # Prints contents of &quot;population_rural_CO_UT_2000_2010_list&quot; population_rural_CO_UT_2000_2010_list ## [[1]] ## # A tibble: 1,062 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08001007800 Census Tract 78, Adams County, Colorado 8378 0 0 2000 CO ## 2 08001007900 Census Tract 79, Adams County, Colorado 6617 0 0 2000 CO ## 3 08001008000 Census Tract 80, Adams County, Colorado 6183 0 0 2000 CO ## 4 08001008100 Census Tract 81, Adams County, Colorado 1050 0 0 2000 CO ## 5 08001008200 Census Tract 82, Adams County, Colorado 5393 0 0 2000 CO ## 6 08001008308 Census Tract 83.08, Adams County, Colorado 4972 0 0 2000 CO ## 7 08001008309 Census Tract 83.09, Adams County, Colorado 3052 50 1.64 2000 CO ## 8 08001008353 Census Tract 83.53, Adams County, Colorado 4612 174 3.77 2000 CO ## 9 08001008385 Census Tract 83.85, Adams County, Colorado 0 0 NaN 2000 CO ## 10 08001008401 Census Tract 84.01, Adams County, Colorado 3261 3261 100 2000 CO ## # … with 1,052 more rows ## ## [[2]] ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows ## ## [[3]] ## # A tibble: 496 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49001100100 Census Tract 1001, Beaver County, Utah 3314 3314 100 2000 UT ## 2 49001100200 Census Tract 1002, Beaver County, Utah 2691 2691 100 2000 UT ## 3 49003960100 Census Tract 9601, Box Elder County, Utah 2712 2712 100 2000 UT ## 4 49003960200 Census Tract 9602, Box Elder County, Utah 6037 4134 68.5 2000 UT ## 5 49003960300 Census Tract 9603, Box Elder County, Utah 6223 889 14.3 2000 UT ## 6 49003960400 Census Tract 9604, Box Elder County, Utah 4521 4521 100 2000 UT ## 7 49003960500 Census Tract 9605, Box Elder County, Utah 4567 435 9.52 2000 UT ## 8 49003960600 Census Tract 9606, Box Elder County, Utah 6543 182 2.78 2000 UT ## 9 49003960701 Census Tract 9607.01, Box Elder County, Utah 4396 0 0 2000 UT ## 10 49003960702 Census Tract 9607.02, Box Elder County, Utah 2225 0 0 2000 UT ## # … with 486 more rows ## ## [[4]] ## # A tibble: 588 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49011125805 Census Tract 1258.05, Davis County, Utah 6167 0 0 2010 UT ## 2 49011125301 Census Tract 1253.01, Davis County, Utah 5108 0 0 2010 UT ## 3 49011125305 Census Tract 1253.05, Davis County, Utah 6152 0 0 2010 UT ## 4 49011125702 Census Tract 1257.02, Davis County, Utah 3839 0 0 2010 UT ## 5 49011125801 Census Tract 1258.01, Davis County, Utah 6703 0 0 2010 UT ## 6 49011125804 Census Tract 1258.04, Davis County, Utah 6377 0 0 2010 UT ## 7 49011125807 Census Tract 1258.07, Davis County, Utah 3114 0 0 2010 UT ## 8 49011125808 Census Tract 1258.08, Davis County, Utah 5616 0 0 2010 UT ## 9 49011125905 Census Tract 1259.05, Davis County, Utah 6156 0 0 2010 UT ## 10 49011125906 Census Tract 1259.06, Davis County, Utah 6987 0 0 2010 UT ## # … with 578 more rows # Uses the ```pluck``` function to extract the Colorado/2010 dataset from &quot;population_rural_CO_UT_2000_2010_list&quot; population_rural_CO_UT_2000_2010_list %&gt;% pluck(2) ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows # Creates a name vector in which the four different state/year combinations are connected by an underscore (&quot;_&quot;) and assigns the resulting vector to an object named &quot;name_vector&quot; name_vector&lt;-paste0(my_states, &quot;_&quot;, my_years) # Prints &quot;name_vector&quot; to inspect contents name_vector ## [1] &quot;CO_2000&quot; &quot;CO_2010&quot; &quot;UT_2000&quot; &quot;UT_2010&quot; # Assigns the names in &quot;name_vector&quot; to the list elements names(population_rural_CO_UT_2000_2010_list)&lt;-name_vector # Prints the contents of &quot;population_rural_CO_UT_2000_2010_list&quot;; note that the list elements are now named according to the state/year inputs upon which they are based population_rural_CO_UT_2000_2010_list ## $CO_2000 ## # A tibble: 1,062 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08001007800 Census Tract 78, Adams County, Colorado 8378 0 0 2000 CO ## 2 08001007900 Census Tract 79, Adams County, Colorado 6617 0 0 2000 CO ## 3 08001008000 Census Tract 80, Adams County, Colorado 6183 0 0 2000 CO ## 4 08001008100 Census Tract 81, Adams County, Colorado 1050 0 0 2000 CO ## 5 08001008200 Census Tract 82, Adams County, Colorado 5393 0 0 2000 CO ## 6 08001008308 Census Tract 83.08, Adams County, Colorado 4972 0 0 2000 CO ## 7 08001008309 Census Tract 83.09, Adams County, Colorado 3052 50 1.64 2000 CO ## 8 08001008353 Census Tract 83.53, Adams County, Colorado 4612 174 3.77 2000 CO ## 9 08001008385 Census Tract 83.85, Adams County, Colorado 0 0 NaN 2000 CO ## 10 08001008401 Census Tract 84.01, Adams County, Colorado 3261 3261 100 2000 CO ## # … with 1,052 more rows ## ## $CO_2010 ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows ## ## $UT_2000 ## # A tibble: 496 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49001100100 Census Tract 1001, Beaver County, Utah 3314 3314 100 2000 UT ## 2 49001100200 Census Tract 1002, Beaver County, Utah 2691 2691 100 2000 UT ## 3 49003960100 Census Tract 9601, Box Elder County, Utah 2712 2712 100 2000 UT ## 4 49003960200 Census Tract 9602, Box Elder County, Utah 6037 4134 68.5 2000 UT ## 5 49003960300 Census Tract 9603, Box Elder County, Utah 6223 889 14.3 2000 UT ## 6 49003960400 Census Tract 9604, Box Elder County, Utah 4521 4521 100 2000 UT ## 7 49003960500 Census Tract 9605, Box Elder County, Utah 4567 435 9.52 2000 UT ## 8 49003960600 Census Tract 9606, Box Elder County, Utah 6543 182 2.78 2000 UT ## 9 49003960701 Census Tract 9607.01, Box Elder County, Utah 4396 0 0 2000 UT ## 10 49003960702 Census Tract 9607.02, Box Elder County, Utah 2225 0 0 2000 UT ## # … with 486 more rows ## ## $UT_2010 ## # A tibble: 588 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 49011125805 Census Tract 1258.05, Davis County, Utah 6167 0 0 2010 UT ## 2 49011125301 Census Tract 1253.01, Davis County, Utah 5108 0 0 2010 UT ## 3 49011125305 Census Tract 1253.05, Davis County, Utah 6152 0 0 2010 UT ## 4 49011125702 Census Tract 1257.02, Davis County, Utah 3839 0 0 2010 UT ## 5 49011125801 Census Tract 1258.01, Davis County, Utah 6703 0 0 2010 UT ## 6 49011125804 Census Tract 1258.04, Davis County, Utah 6377 0 0 2010 UT ## 7 49011125807 Census Tract 1258.07, Davis County, Utah 3114 0 0 2010 UT ## 8 49011125808 Census Tract 1258.08, Davis County, Utah 5616 0 0 2010 UT ## 9 49011125905 Census Tract 1259.05, Davis County, Utah 6156 0 0 2010 UT ## 10 49011125906 Census Tract 1259.06, Davis County, Utah 6987 0 0 2010 UT ## # … with 578 more rows # Uses the ```pluck``` function to extract the 2010 Colorado dataset by name population_rural_CO_UT_2000_2010_list %&gt;% pluck(&quot;CO_2010&quot;) ## # A tibble: 1,249 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08013013602 Census Tract 136.02, Boulder County, Colorado 912 912 100 2010 CO ## 2 08013013701 Census Tract 137.01, Boulder County, Colorado 6334 5095 80.4 2010 CO ## 3 08013013702 Census Tract 137.02, Boulder County, Colorado 5952 5952 100 2010 CO ## 4 08013060600 Census Tract 606, Boulder County, Colorado 5325 231 4.34 2010 CO ## 5 08013060700 Census Tract 607, Boulder County, Colorado 3091 111 3.59 2010 CO ## 6 08013060800 Census Tract 608, Boulder County, Colorado 6107 192 3.14 2010 CO ## 7 08013060900 Census Tract 609, Boulder County, Colorado 4139 0 0 2010 CO ## 8 08013061300 Census Tract 613, Boulder County, Colorado 3417 0 0 2010 CO ## 9 08013061400 Census Tract 614, Boulder County, Colorado 3990 0 0 2010 CO ## 10 08014030000 Census Tract 300, Broomfield County, Colorado 3378 0 0 2010 CO ## # … with 1,239 more rows 8.3.2 Retrieving data from multiple years, for multiple states, and placing all of the data into a single data frame # # Applies the &quot;population_rural_statetract_year&quot; function to the inputs specified by the &quot;my_states&quot; and &quot;my_years&quot; vectors, and deposits the resulting four census datasets (CO/2000, CO/2010, UT/2000, UT/2010) into a single data frame assigned to an object named &quot;population_rural_CO_UT_2000_2010_df&quot; population_rural_CO_UT_2000_2010_df&lt;-map2_dfr(.x=my_states, .y=my_years, .f=population_rural_statetract_year) ## Getting data from the 2000 decennial Census ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; ## Using Census Summary File 1 ## Getting data from the 2000 decennial Census ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 ## Getting data from the 2010 decennial Census ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Using Census Summary File 1 # Prints the contents of &quot;population_rural_CO_UT_2000_2010_df&quot; population_rural_CO_UT_2000_2010_df ## # A tibble: 3,395 x 7 ## GEOID NAME P001001 P002005 rural_pct YEAR STATE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 08001007800 Census Tract 78, Adams County, Colorado 8378 0 0 2000 CO ## 2 08001007900 Census Tract 79, Adams County, Colorado 6617 0 0 2000 CO ## 3 08001008000 Census Tract 80, Adams County, Colorado 6183 0 0 2000 CO ## 4 08001008100 Census Tract 81, Adams County, Colorado 1050 0 0 2000 CO ## 5 08001008200 Census Tract 82, Adams County, Colorado 5393 0 0 2000 CO ## 6 08001008308 Census Tract 83.08, Adams County, Colorado 4972 0 0 2000 CO ## 7 08001008309 Census Tract 83.09, Adams County, Colorado 3052 50 1.64 2000 CO ## 8 08001008353 Census Tract 83.53, Adams County, Colorado 4612 174 3.77 2000 CO ## 9 08001008385 Census Tract 83.85, Adams County, Colorado 0 0 NaN 2000 CO ## 10 08001008401 Census Tract 84.01, Adams County, Colorado 3261 3261 100 2000 CO ## # … with 3,385 more rows https://mattherman.info/blog/tidycensus-mult-year/ median age by county colorado vis and map functions and iteration advanced retrieval temporal dynamics "],["working-with-multiple-datasets.html", "9 Working with multiple datasets 9.1 Using functions and iteration to clean multiple datasets 9.2 Joining datasets", " 9 Working with multiple datasets It is often useful to bring separate datasets together in order to carry out a given analytic task. For instance, one might want to compare change over time by bringing together census datasets from different years (though it’s worth noting that temporal analysis with census data can be tricky, and must be undertaken with caution, due to changes in calculation methods or geographic borders across different census years). For example, let’s say we want to visualize the percentage point change in every state’s rural population share between 2000 and 2010. In other words, how did the percentage of each states rural population (with respect to its overall population) change across the first decade of the 2000s? Which states saw the greatest degree of rural depopulation, and which states saw the lowest degree of rural depopulation? Let’s begin with the population_rural_2000_2010_list object that we created in the previous section. It’s a list that contains information on the percentage of each state’s population living in rural areas; the first list element contains information on states’ rural population share from the 2000 census, while the second contains analogous information from the 2010 census. # Prints contents of &quot;population_rural_2000_2010_list&quot; population_rural_2000_2010_list ## $`2000` ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4447100 1981427 44.6 2000 ## 2 02 Alaska 626932 215675 34.4 2000 ## 3 04 Arizona 5130632 607097 11.8 2000 ## 4 05 Arkansas 2673400 1269221 47.5 2000 ## 5 06 California 33871648 1881985 5.56 2000 ## 6 08 Colorado 4301261 668076 15.5 2000 ## 7 09 Connecticut 3405565 417506 12.3 2000 ## 8 10 Delaware 783600 155842 19.9 2000 ## 9 11 District of Columbia 572059 0 0 2000 ## 10 12 Florida 15982378 1712358 10.7 2000 ## # … with 42 more rows ## ## $`2010` ## # A tibble: 52 x 6 ## GEOID NAME P001001 P002005 rural_pct year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 4779736 1957932 41.0 2010 ## 2 02 Alaska 710231 241338 34.0 2010 ## 3 04 Arizona 6392017 651358 10.2 2010 ## 4 05 Arkansas 2915918 1278329 43.8 2010 ## 5 06 California 37253956 1880350 5.05 2010 ## 6 22 Louisiana 4533372 1215567 26.8 2010 ## 7 21 Kentucky 4339367 1806024 41.6 2010 ## 8 08 Colorado 5029196 696435 13.8 2010 ## 9 09 Connecticut 3574097 429155 12.0 2010 ## 10 10 Delaware 897934 149985 16.7 2010 ## # … with 42 more rows In order to visualize the percentage point difference in state-level rural population shares between 2010 and 2000, we can join the two datasets in population_rural_2000_2010_list, compute the difference between “rural_pct” in the 2010 dataset and “rural_pct” in the 2000 dataset, and then use now-familiar visualization techniques to visualize this difference. Before joining the two datasets, it might make sense to clean them up to avoid any confusion after we implement the join. First, it would be nice to rename the “rural_pct” variable in the two datasets to indicate the relevant year, i.e. in the form “rural_pct_YEAR” where YEAR takes on the value in the existing “year” column. After renaming the “rural_pct” variable in this way, we can go ahead and delete the “P001001”, “P002005”, and “year” columns, since they do not contain necessary information, and will simply clutter the final (joined) dataset. 9.1 Using functions and iteration to clean multiple datasets To clean up the datasets in this way, let’s write a function that makes these changes, and use now-familiar iteration techniques to apply the changes to both of the list elements in population_rural_2000_2010_list. # Write function to clean dataset according to the requirements specified above and assign to an object named &quot;cleaning_function&quot; cleaning_function&lt;-function(dataset){ year_vector&lt;-dataset$year # extracts the &quot;year&quot; column as a vector year_extracted&lt;-year_vector[1] # plucks out the first element of &quot;year_vector&quot; desired_name&lt;-paste0(&quot;rural_pct&quot;, &quot;_&quot;, year_extracted) # creates desired name string names(dataset)[5]&lt;-desired_name # renames &quot;rural_pct&quot; with &quot;desired_name&quot; final&lt;-dataset %&gt;% select(-c(P001001, P002005, year)) # deletes specified columns return(final) # returns cleaned dataset } # applies &quot;cleaning_function&quot; to both of the list elements in ```population_rural_2000_2010_list``` and assigns the result to a new object named &quot;population_rural_2000_2010_list_cleaned&quot; population_rural_2000_2010_list_cleaned&lt;-map(population_rural_2000_2010_list, cleaning_function) # Prints contents of &quot;population_rural_2000_2010_list_cleaned&quot; population_rural_2000_2010_list_cleaned ## $`2000` ## # A tibble: 52 x 3 ## GEOID NAME rural_pct_2000 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama 44.6 ## 2 02 Alaska 34.4 ## 3 04 Arizona 11.8 ## 4 05 Arkansas 47.5 ## 5 06 California 5.56 ## 6 08 Colorado 15.5 ## 7 09 Connecticut 12.3 ## 8 10 Delaware 19.9 ## 9 11 District of Columbia 0 ## 10 12 Florida 10.7 ## # … with 42 more rows ## ## $`2010` ## # A tibble: 52 x 3 ## GEOID NAME rural_pct_2010 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama 41.0 ## 2 02 Alaska 34.0 ## 3 04 Arizona 10.2 ## 4 05 Arkansas 43.8 ## 5 06 California 5.05 ## 6 22 Louisiana 26.8 ## 7 21 Kentucky 41.6 ## 8 08 Colorado 13.8 ## 9 09 Connecticut 12.0 ## 10 10 Delaware 16.7 ## # … with 42 more rows 9.2 Joining datasets Now, let’s merge these datasets together, using “GEOID” as the join variable: # Joins datasets in list and assigns joined dataset to object named &quot;rural_change&quot; rural_change&lt;-full_join(population_rural_2000_2010_list_cleaned[[&quot;2010&quot;]], population_rural_2000_2010_list_cleaned[[&quot;2000&quot;]], by=&quot;GEOID&quot;) # cleans &quot;rural_change&quot; by deleting &quot;NAME.y&quot; and renaming &quot;NAME.x&quot;, and then creates new variable that captures the difference between &quot;rural_pct_2010&quot; and &quot;rural_pct_2000&quot; rural_change&lt;-rural_change %&gt;% select(-(NAME.y)) %&gt;% rename(NAME=NAME.x) %&gt;% mutate(rural_share_change=rural_pct_2010-rural_pct_2000) # prints modified &quot;rural_change&quot; object rural_change ## # A tibble: 52 x 5 ## GEOID NAME rural_pct_2010 rural_pct_2000 rural_share_change ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01 Alabama 41.0 44.6 -3.59 ## 2 02 Alaska 34.0 34.4 -0.421 ## 3 04 Arizona 10.2 11.8 -1.64 ## 4 05 Arkansas 43.8 47.5 -3.64 ## 5 06 California 5.05 5.56 -0.509 ## 6 22 Louisiana 26.8 27.4 -0.560 ## 7 21 Kentucky 41.6 44.2 -2.62 ## 8 08 Colorado 13.8 15.5 -1.68 ## 9 09 Connecticut 12.0 12.3 -0.252 ## 10 10 Delaware 16.7 19.9 -3.18 ## # … with 42 more rows We can now use this joined dataset to visualize the extent of rural depopulation from 2000 to 2010, across the various states: rural_change_graph&lt;-rural_change %&gt;% ggplot(aes(x = reorder(NAME,rural_share_change), y=rural_share_change)) + geom_col()+ coord_flip()+ labs(title=&quot;Rural Depopulation&quot;, x=&quot;State Name&quot;, y=&quot;Pct Change in Rural Population&quot;)+ theme(plot.title=element_text(hjust=0.5)) rural_change_graph To make a map: state_population_2010_geo&lt;-get_decennial(geography = &quot;state&quot;, variables = &quot;P001001&quot;, year = 2010, geometry=TRUE) state_population_2010_geo ## Simple feature collection with 52 features and 4 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -179.1473 ymin: 17.88481 xmax: 179.7785 ymax: 71.35256 ## geographic CRS: NAD83 ## # A tibble: 52 x 5 ## GEOID NAME variable value geometry ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 23 Maine P001001 1.33e6 (((-67.61976 44.51975, -67.61541 44.52197, -67.58774 44.5162, -67… ## 2 25 Massachuset… P001001 6.55e6 (((-70.83204 41.6065, -70.82373 41.59857, -70.82092 41.58767, -70… ## 3 26 Michigan P001001 9.88e6 (((-88.68443 48.11578, -88.67563 48.12044, -88.67639 48.12488, -8… ## 4 30 Montana P001001 9.89e5 (((-104.0577 44.99743, -104.2501 44.99822, -104.4701 44.99845, -1… ## 5 32 Nevada P001001 2.70e6 (((-114.0506 37.0004, -114.05 36.95777, -114.0506 36.84313, -114.… ## 6 34 New Jersey P001001 8.79e6 (((-75.52684 39.65571, -75.52634 39.65641, -75.52234 39.66081, -7… ## 7 36 New York P001001 1.94e7 (((-71.94356 41.28667, -71.9268 41.29012, -71.93526 41.28058, -71… ## 8 37 North Carol… P001001 9.54e6 (((-82.60288 36.03983, -82.60074 36.03742, -82.59878 36.03416, -8… ## 9 39 Ohio P001001 1.15e7 (((-82.81349 41.72347, -82.81049 41.72052, -82.80887 41.70833, -8… ## 10 42 Pennsylvania P001001 1.27e7 (((-75.41504 39.80179, -75.42804 39.80921, -75.45374 39.82031, -7… ## # … with 42 more rows rural_change_geo&lt;-full_join(state_population_2010_geo, rural_change, by=&quot;GEOID&quot;) rural_change_geo ## Simple feature collection with 52 features and 8 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -179.1473 ymin: 17.88481 xmax: 179.7785 ymax: 71.35256 ## geographic CRS: NAD83 ## # A tibble: 52 x 9 ## GEOID NAME.x variable value geometry NAME.y rural_pct_2010 rural_pct_2000 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;MULTIPOLYGON [°]&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 23 Maine P001001 1.33e6 (((-67.61976 44.51975, -… Maine 61.3 59.8 ## 2 25 Massa… P001001 6.55e6 (((-70.83204 41.6065, -7… Massa… 8.03 8.63 ## 3 26 Michi… P001001 9.88e6 (((-88.68443 48.11578, -… Michi… 25.4 25.3 ## 4 30 Monta… P001001 9.89e5 (((-104.0577 44.99743, -… Monta… 44.1 45.9 ## 5 32 Nevada P001001 2.70e6 (((-114.0506 37.0004, -1… Nevada 5.80 8.49 ## 6 34 New J… P001001 8.79e6 (((-75.52684 39.65571, -… New J… 5.32 5.65 ## 7 36 New Y… P001001 1.94e7 (((-71.94356 41.28667, -… New Y… 12.1 12.5 ## 8 37 North… P001001 9.54e6 (((-82.60288 36.03983, -… North… 33.9 39.8 ## 9 39 Ohio P001001 1.15e7 (((-82.81349 41.72347, -… Ohio 22.1 22.6 ## 10 42 Penns… P001001 1.27e7 (((-75.41504 39.80179, -… Penns… 21.3 22.9 ## # … with 42 more rows, and 1 more variable: rural_share_change &lt;dbl&gt; preliminary_ruralchange_map&lt;-tm_shape(rural_change_geo)+ tm_polygons(col=&quot;rural_share_change&quot;, n=6,style=&quot;jenks&quot;,palette=&quot;BuGn&quot;, midpoint=FALSE) preliminary_ruralchange_map state_population_2010_geo&lt;-get_decennial(geography = &quot;state&quot;, variables = &quot;P001001&quot;, year = 2010, geometry=TRUE) %&gt;% tigris::shift_geometry() ## Getting data from the 2010 decennial Census ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. ## Using Census Summary File 1 rural_change_geo&lt;-full_join(state_population_2010_geo, rural_change, by=&quot;GEOID&quot;) final_ruralchange_map&lt;-tm_shape(rural_change_geo)+ tm_polygons(col=&quot;rural_share_change&quot;, breaks=c(-6,-4,-2, 0, 1, 2), palette=&quot;YlGnBu&quot;, midpoint=T, title=&quot;Percentage Point\\nDifference in Rural Population Share\\n(2010 vs 2000)&quot;)+ tm_layout(frame=FALSE, main.title=&quot;Rural Depopulation by State, 2000-2010&quot;, main.title.position=&quot;center&quot;, legend.outside=TRUE, legend.title.size=1, legend.outside.position = c(&quot;bottom&quot;), attr.outside=T)+ tm_credits(&quot;Source: US Census via tidycensus&quot;, position=c(&quot;right&quot;, &quot;bottom&quot;)) final_ruralchange_map ## Credits not supported in view mode. "],["exporting-r-objects.html", "10 Exporting R Objects 10.1 Exporting a single object 10.2 Exporting multiple objects", " 10 Exporting R Objects 10.1 Exporting a single object 10.1.1 Exporting a single dataset to disk as a CSV file write_csv(state_population_2010, &quot;state_population_2010.csv&quot;) Figure 10.1: ‘state_population_2010’ exported as CSV file to working directory write_csv(state_population_2010, &quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/exported_datasets/state_population_2010.csv&quot;) Figure 10.2: ‘state_population_2010’ exported as CSV file to dedicated directory named ’exported_datasets 10.1.2 Exporting a single map to disk as a png, jpeg, or PDF file with tmap_save median_age_CO_map tmap_save(median_age_CO_map, &quot;median_age_CO_map.png&quot;) ## Map saved to /Users/adra7980/Documents/git_repositories/R_census/median_age_CO_map.png ## Resolution: 2448.944 by 1800.776 pixels ## Size: 8.163147 by 6.002587 inches (300 dpi) Figure 10.3: Colorado median age map exported to working directory as png file tmap_save(median_age_CO_map, &quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/median_age_CO_map.pdf&quot;) ## Map saved to /Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/median_age_CO_map.pdf ## Size: 8.152778 by 6 inches Figure 10.4: Colorado median age map exported to dedicated directory as PDF file 10.1.3 Exporting a single ggplot visualization to disk as a png, jpeg, or PDF file with “ggsave” median_age_CO_cleaned_visualization ggsave(&quot;CO_median_age_graph.png&quot;, median_age_CO_cleaned_visualization) ## Saving 7 x 5 in image Figure 10.5: Colorado median age map graph exported to working directory as png file ggsave(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/CO_median_age_graph.jpeg&quot;, median_age_CO_cleaned_visualization) ## Saving 7 x 5 in image Figure 10.6: Colorado median age map graph exported to dedicated directory as jpeg file 10.1.4 Exporting a single ggplot or tmap visualization with a graphics device Exporting a single tmap visualization as a pdf file using a pdf device pdf(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/CO_median_age_map.pdf&quot;) median_age_CO_map ## Credits not supported in view mode. dev.off() ## quartz_off_screen ## 2 Exporting a single tmap visualization as a png file using a png device png(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/CO_median_age_map.png&quot;) median_age_CO_map ## Credits not supported in view mode. dev.off() ## quartz_off_screen ## 2 Exporting a single ggplot visualization as a jpeg file using a jpeg device jpeg(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/CO_median_age_graph.jpeg&quot;) median_age_CO_cleaned_visualization dev.off() ## quartz_off_screen ## 2 10.2 Exporting multiple objects 10.2.1 Exporting multiple csv files stored in a list population_rural_2000_2010_list_cleaned ## $`2000` ## # A tibble: 52 x 3 ## GEOID NAME rural_pct_2000 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama 44.6 ## 2 02 Alaska 34.4 ## 3 04 Arizona 11.8 ## 4 05 Arkansas 47.5 ## 5 06 California 5.56 ## 6 08 Colorado 15.5 ## 7 09 Connecticut 12.3 ## 8 10 Delaware 19.9 ## 9 11 District of Columbia 0 ## 10 12 Florida 10.7 ## # … with 42 more rows ## ## $`2010` ## # A tibble: 52 x 3 ## GEOID NAME rural_pct_2010 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01 Alabama 41.0 ## 2 02 Alaska 34.0 ## 3 04 Arizona 10.2 ## 4 05 Arkansas 43.8 ## 5 06 California 5.05 ## 6 22 Louisiana 26.8 ## 7 21 Kentucky 41.6 ## 8 08 Colorado 13.8 ## 9 09 Connecticut 12.0 ## 10 10 Delaware 16.7 ## # … with 42 more rows writeout_function&lt;-function(object, filename){ setwd(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/exported_datasets&quot;) filename&lt;-paste0(filename, &quot;.csv&quot;) write_csv(object, filename) } filename_vector&lt;-paste0(&quot;rural_pct_&quot;, names(population_rural_2000_2010_list_cleaned)) filename_vector ## [1] &quot;rural_pct_2000&quot; &quot;rural_pct_2010&quot; walk2(population_rural_2000_2010_list_cleaned, filename_vector, writeout_function) Figure 10.7: Rural pct by state, for 2000 and 2010, exported to dedicated directory as CSV files 10.2.2 Exporting multiple csv files stored as separate objects in the global environment state_total_2010&lt;-get_decennial(geography=&quot;state&quot;, variables = &quot;P001001&quot;, year = 2010) ## Getting data from the 2010 decennial Census ## Using Census Summary File 1 state_rural_2010&lt;-get_decennial(geography = &quot;state&quot;, variables = &quot;P002005&quot;, year = 2010) ## Getting data from the 2010 decennial Census ## Using Census Summary File 1 # put objects to export in a named list objects_to_export&lt;-lst(state_total_2010, state_rural_2010) # create filename vector filename_vector&lt;-names(objects_to_export) # write out census datasets as CSV files walk2(objects_to_export, filename_vector, writeout_function) Figure 10.8: ‘state_total_2010, and ’state_rural_2010’, exported to dedicated directory as CSV files 10.2.3 Using a graphics device to export multiple objects from a list into a single PDF file Use PDF viewer to write out multiple tmap visualizations stored in a list to a single PDF file pdf(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/age_maps.pdf&quot;) county_age_maps_list ## $NM ## Credits not supported in view mode. ## ## $UT ## Credits not supported in view mode. ## ## $AZ ## Credits not supported in view mode. ## ## $WY ## Credits not supported in view mode. dev.off() ## quartz_off_screen ## 2 Use PDF viewer to write out multiple ggplot visualizations stored in a list to a single PDF file pdf(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations/age_graphs.pdf&quot;) county_age_graphs_list ## $NM ## ## $UT ## ## $AZ ## ## $WY dev.off() ## quartz_off_screen ## 2 Figure 10.9: All of the graphs in county_age_graphs_list written to a single PDF file, and all of the maps in county_age_maps_list written to a single PDF file; the displayed file is the first graph in county_age_graphs_list, depicting the median age in New Mexico counties 10.2.4 Writing out multiple “tmap” or “ggplot” objects as separate files viz_save_general&lt;-function(plot, filename, extension){ setwd(&quot;/Users/adra7980/Documents/git_repositories/R_census/exported_objects/visualizations&quot;) filename_string&lt;-paste0(filename, extension) if(extension==&quot;.pdf&quot;){ pdf(filename_string) } else { if (extension==&quot;.png&quot;){ png(filename_string) } else { if (extension==&quot;.jpeg&quot;){ jpeg(filename_string) } } } print(plot) dev.off() } # writes out tmap objects from &quot;county_age_maps_list&quot; as separate jpeg files filenames&lt;-paste0(names(county_age_maps_list), &quot;_&quot;, &quot;COUNTY_AGE_MAP&quot;) inputlist&lt;-list(county_age_maps_list, filenames, &quot;.jpeg&quot;) pwalk(inputlist, viz_save_general) ## Credits not supported in view mode. ## Credits not supported in view mode. ## Credits not supported in view mode. ## Credits not supported in view mode. Figure 10.10: The four tmap elements in the county_age_maps_list, written out to a dedicated directory as separate jpeg files If you want PDFs of the maps in ```county_age_maps_list\", then… # writes out tmap objects from &quot;county_age_maps_list&quot; as separate PDF files filenames&lt;-paste0(names(county_age_maps_list), &quot;_&quot;, &quot;COUNTY_AGE_MAP&quot;) inputlist&lt;-list(county_age_maps_list, filenames, &quot;.pdf&quot;) pwalk(inputlist, viz_save_general) ## Credits not supported in view mode. ## Credits not supported in view mode. ## Credits not supported in view mode. ## Credits not supported in view mode. Figure 10.11: The four tmap elements in the county_age_maps_list, written out to a dedicated directory as separate PDF files We can use the same function (viz_save_general) to write out ggplot objects as separate files with a specified file extension. For example, to write out the graphs in county_age_graphs_list as png files: filenames&lt;-paste0(names(county_age_graphs_list), &quot;_&quot;, &quot;COUNTY_AGE_GRAPH&quot;) inputlist&lt;-list(county_age_graphs_list, filenames, &quot;.png&quot;) pwalk(inputlist, viz_save_general) Figure 10.12: The four ggplot elements in the county_age_graphs_list, written out to a dedicated directory as separate png files To write out the graphs in county_age_graphs_list as pdf or jpeg files, simply modify the file extensions: # Writes out elements in &quot;county_age_graphs_list&quot; as separate pdf files filenames&lt;-paste0(names(county_age_graphs_list), &quot;_&quot;, &quot;COUNTY_AGE_GRAPH&quot;) inputlist&lt;-list(county_age_graphs_list, filenames, &quot;.pdf&quot;) pwalk(inputlist, viz_save_general) # Writes out elements in &quot;county_age_graphs_list&quot; as separate jpeg files filenames&lt;-paste0(names(county_age_graphs_list), &quot;_&quot;, &quot;COUNTY_AGE_GRAPH&quot;) inputlist&lt;-list(county_age_graphs_list, filenames, &quot;.jpeg&quot;) pwalk(inputlist, viz_save_general) "],["acs-data-retrieval.html", "11 ACS Data Retrieval 11.1 Extracting variable codes for ACS data 11.2 Calling ACS data with tidycensus", " 11 ACS Data Retrieval 11.1 Extracting variable codes for ACS data To inspect the variable list for the ACS, use the “load variables” function. Let’s say we want to work with the 5-year ACS ending in 2019: ACS_5_2019&lt;-load_variables(2019,&quot;acs5&quot;) ACS_5_2019 ## # A tibble: 27,040 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 B01001_001 Estimate!!Total: SEX BY AGE ## 2 B01001_002 Estimate!!Total:!!Male: SEX BY AGE ## 3 B01001_003 Estimate!!Total:!!Male:!!Under 5 years SEX BY AGE ## 4 B01001_004 Estimate!!Total:!!Male:!!5 to 9 years SEX BY AGE ## 5 B01001_005 Estimate!!Total:!!Male:!!10 to 14 years SEX BY AGE ## 6 B01001_006 Estimate!!Total:!!Male:!!15 to 17 years SEX BY AGE ## 7 B01001_007 Estimate!!Total:!!Male:!!18 and 19 years SEX BY AGE ## 8 B01001_008 Estimate!!Total:!!Male:!!20 years SEX BY AGE ## 9 B01001_009 Estimate!!Total:!!Male:!!21 years SEX BY AGE ## 10 B01001_010 Estimate!!Total:!!Male:!!22 to 24 years SEX BY AGE ## # … with 27,030 more rows If we wanted to view the variables for the 5-year acs ending in 2015, we’d use ACS_5_2015&lt;-load_variables(2015,&quot;acs5&quot;) ACS_5_2015 ## # A tibble: 22,768 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 B00001_001 Estimate!!Total UNWEIGHTED SAMPLE COUNT OF THE POPULATION ## 2 B00002_001 Estimate!!Total UNWEIGHTED SAMPLE HOUSING UNITS ## 3 B01001_001 Estimate!!Total SEX BY AGE ## 4 B01001_002 Estimate!!Total!!Male SEX BY AGE ## 5 B01001_003 Estimate!!Total!!Male!!Under 5 years SEX BY AGE ## 6 B01001_004 Estimate!!Total!!Male!!5 to 9 years SEX BY AGE ## 7 B01001_005 Estimate!!Total!!Male!!10 to 14 years SEX BY AGE ## 8 B01001_006 Estimate!!Total!!Male!!15 to 17 years SEX BY AGE ## 9 B01001_007 Estimate!!Total!!Male!!18 and 19 years SEX BY AGE ## 10 B01001_008 Estimate!!Total!!Male!!20 years SEX BY AGE ## # … with 22,758 more rows If we wanted to view the variables for the 1-year acs ending in 2017, we’d use: ACS_1_2017&lt;-load_variables(2017, &quot;acs1&quot;) ACS_1_2017 ## # A tibble: 33,594 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 B00001_001 Estimate!!Total UNWEIGHTED SAMPLE COUNT OF THE POPULATION ## 2 B00002_001 Estimate!!Total UNWEIGHTED SAMPLE HOUSING UNITS ## 3 B01001_001 Estimate!!Total SEX BY AGE ## 4 B01001_002 Estimate!!Total!!Male SEX BY AGE ## 5 B01001_003 Estimate!!Total!!Male!!Under 5 years SEX BY AGE ## 6 B01001_004 Estimate!!Total!!Male!!5 to 9 years SEX BY AGE ## 7 B01001_005 Estimate!!Total!!Male!!10 to 14 years SEX BY AGE ## 8 B01001_006 Estimate!!Total!!Male!!15 to 17 years SEX BY AGE ## 9 B01001_007 Estimate!!Total!!Male!!18 and 19 years SEX BY AGE ## 10 B01001_008 Estimate!!Total!!Male!!20 years SEX BY AGE ## # … with 33,584 more rows 3-year ACS ending in 2012: ACS_3_2012&lt;-load_variables(2012, &quot;acs3&quot;) ACS_3_2012 ## # A tibble: 34,278 x 3 ## name label concept ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 B00001_001 Estimate!!Total UNWEIGHTED SAMPLE COUNT OF THE POPULATION ## 2 B00002_001 Estimate!!Total UNWEIGHTED SAMPLE HOUSING UNITS ## 3 B01001_001 Estimate!!Total SEX BY AGE ## 4 B01001_002 Estimate!!Total!!Male SEX BY AGE ## 5 B01001_003 Estimate!!Total!!Male!!Under 5 years SEX BY AGE ## 6 B01001_004 Estimate!!Total!!Male!!5 to 9 years SEX BY AGE ## 7 B01001_005 Estimate!!Total!!Male!!10 to 14 years SEX BY AGE ## 8 B01001_006 Estimate!!Total!!Male!!15 to 17 years SEX BY AGE ## 9 B01001_007 Estimate!!Total!!Male!!18 and 19 years SEX BY AGE ## 10 B01001_008 Estimate!!Total!!Male!!20 years SEX BY AGE ## # … with 34,268 more rows 11.2 Calling ACS data with tidycensus County-level median income data median_income&lt;-get_acs(geography=&quot;county&quot;, variables=&quot;B19013_001&quot;, year=2019) %&gt;% rename(median_income=estimate) %&gt;% arrange(desc(median_income)) median_income ## # A tibble: 3,220 x 5 ## GEOID NAME variable median_income moe ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 51107 Loudoun County, Virginia B19013_001 142299 2089 ## 2 51610 Falls Church city, Virginia B19013_001 127610 16144 ## 3 51059 Fairfax County, Virginia B19013_001 124831 1281 ## 4 06085 Santa Clara County, California B19013_001 124055 1117 ## 5 06081 San Mateo County, California B19013_001 122641 1680 ## 6 35028 Los Alamos County, New Mexico B19013_001 121324 4613 ## 7 24027 Howard County, Maryland B19013_001 121160 2169 ## 8 51013 Arlington County, Virginia B19013_001 120071 2064 ## 9 08035 Douglas County, Colorado B19013_001 119730 1710 ## 10 51600 Fairfax city, Virginia B19013_001 116979 7777 ## # … with 3,210 more rows "],["exploratory-analysis-and-visualization-with-acs-data.html", "12 Exploratory analysis and visualization with ACS data 12.1 Identifying and visualizing the counties from each state with the highest median income 12.2 Visualizing county-level median income for Colorado 12.3 Writing functions to visualize ACS data 12.4 Dynamic mapping", " 12 Exploratory analysis and visualization with ACS data 12.1 Identifying and visualizing the counties from each state with the highest median income highest_income_counties&lt;-median_income %&gt;% separate(NAME,c(&quot;County&quot;,&quot;State&quot;),sep=&quot;,&quot;) %&gt;% group_by(State) %&gt;% arrange(desc(median_income)) %&gt;% slice_max(median_income, n=1) %&gt;% unite(NAME, c(&quot;County&quot;,&quot;State&quot;), remove=FALSE, sep=&quot;,&quot;) highest_income_counties ## # A tibble: 52 x 7 ## # Groups: State [52] ## GEOID NAME County State variable median_income moe ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01117 Shelby County, Alabama Shelby County &quot; Alabama&quot; B19013_0… 77799 2248 ## 2 02110 Juneau City and Borough, Alas… Juneau City and B… &quot; Alaska&quot; B19013_0… 88390 4059 ## 3 04013 Maricopa County, Arizona Maricopa County &quot; Arizona&quot; B19013_0… 64468 326 ## 4 05007 Benton County, Arkansas Benton County &quot; Arkansas&quot; B19013_0… 66362 1292 ## 5 06085 Santa Clara County, California Santa Clara County &quot; California&quot; B19013_0… 124055 1117 ## 6 08035 Douglas County, Colorado Douglas County &quot; Colorado&quot; B19013_0… 119730 1710 ## 7 09001 Fairfield County, Connecticut Fairfield County &quot; Connecticut&quot; B19013_0… 95645 1039 ## 8 10003 New Castle County, Delaware New Castle County &quot; Delaware&quot; B19013_0… 73892 1210 ## 9 11001 District of Columbia, Distric… District of Colum… &quot; District of C… B19013_0… 86420 1008 ## 10 12109 St. Johns County, Florida St. Johns County &quot; Florida&quot; B19013_0… 82252 2741 ## # … with 42 more rows highest_income_counties_viz&lt;- highest_income_counties %&gt;% ggplot(aes(x=median_income,y=reorder(NAME, median_income)))+ geom_errorbarh(aes(xmin = median_income - moe, xmax = median_income + moe)) + geom_point(color = &quot;red&quot;, size = 3)+ labs(title=&quot;County with Highest Median Income, by State&quot;, y=&quot;&quot;, x=&quot;Median Income Estimate from 5-year ACS\\n(bars indicate margin of error)&quot;)+ theme(plot.title=element_text(hjust=0.5)) highest_income_counties_viz 12.2 Visualizing county-level median income for Colorado median_income_CO_counties_2018&lt;-get_acs(geography=&quot;county&quot;, state=&quot;CO&quot;, variables=&quot;B19013_001&quot;, year=2018) %&gt;% rename(median_income=estimate) %&gt;% arrange(desc(median_income)) ## Getting data from the 2014-2018 5-year ACS ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; median_income_CO_counties_2018_viz&lt;- median_income_CO_2018 %&gt;% mutate(County_Name=str_remove_all(NAME,&quot;County, Colorado&quot;)) %&gt;% ggplot(aes(x=median_income,y=reorder(County_Name, median_income)))+ geom_errorbarh(aes(xmin = median_income - moe, xmax = median_income + moe)) + geom_point(color = &quot;blue&quot;, size = 3)+ labs(title=&quot;Median Income in Colorado, by County (2018)&quot;, y=&quot;&quot;, x=&quot;Median Income Estimate from 5 year ACS\\n(Bars indicate margin of error)&quot;)+ theme(plot.title=element_text(hjust=0.5)) median_income_CO_counties_2018_viz 12.3 Writing functions to visualize ACS data county_median_income&lt;-function(state_abbrev, state_name){ median_income&lt;-get_acs(geography=&quot;county&quot;, state=state_abbrev, variables=&quot;B19013_001&quot;, year=2018) %&gt;% rename(median_income=estimate) %&gt;% arrange(desc(median_income)) string_to_remove&lt;-paste0(&quot;County&quot;, &quot;, &quot;, state_name) chart_title&lt;-paste0(&quot;Median Income in &quot;, state_name, &quot;, by County (2018)&quot;) median_income_viz&lt;-median_income %&gt;% mutate(County_Name=str_remove_all(NAME,string_to_remove)) %&gt;% ggplot(aes(x=median_income,y=reorder(County_Name, median_income)))+ geom_errorbarh(aes(xmin = median_income - moe, xmax = median_income + moe)) + geom_point(color = &quot;blue&quot;, size = 3)+ labs(title=chart_title, y=&quot;&quot;, x=&quot;Median Income Estimate from 5 year ACS\\n(Bars indicate margin of error)&quot;)+ theme(plot.title=element_text(hjust=0.5))+ scale_x_continuous(labels=scales::comma) return(median_income_viz) } # test function county_median_income(&quot;NY&quot;, &quot;New York&quot;) ## Getting data from the 2014-2018 5-year ACS ## Using FIPS code &#39;36&#39; for state &#39;NY&#39; # Creates vector of state abbreviations state_abbrev_vector&lt;-c(&quot;NM&quot;, &quot;UT&quot;, &quot;AZ&quot;, &quot;WY&quot;) # Creates vector of state names state_name_vector&lt;-c(&quot;New Mexico&quot;, &quot;Utah&quot;, &quot;Arizona&quot;, &quot;Wyoming&quot;) # Iteratively applies &quot;county_median_income&quot; function to inputs specified by &quot;state_abbrev&quot; vector # and &quot;state_name&quot; vector, and assigns resulting visualization outputs to list named &quot;median_income_2018_viz_list&quot; median_income2018_viz_list&lt;-map2(state_abbrev_vector, state_name_vector, county_median_income) ## Getting data from the 2014-2018 5-year ACS ## Using FIPS code &#39;35&#39; for state &#39;NM&#39; ## Getting data from the 2014-2018 5-year ACS ## Using FIPS code &#39;49&#39; for state &#39;UT&#39; ## Getting data from the 2014-2018 5-year ACS ## Using FIPS code &#39;04&#39; for state &#39;AZ&#39; ## Getting data from the 2014-2018 5-year ACS ## Using FIPS code &#39;56&#39; for state &#39;WY&#39; # Creates a vector of names for &quot;median_income2018_viz_list&quot; list elements names_median_income_list&lt;-paste0(state_abbrev_vector, &quot;_&quot;, &quot;2018_ACS_medianincome&quot;) # Inspect names in &quot;names_median_income_list&quot; vector names_median_income_list ## [1] &quot;NM_2018_ACS_medianincome&quot; &quot;UT_2018_ACS_medianincome&quot; &quot;AZ_2018_ACS_medianincome&quot; ## [4] &quot;WY_2018_ACS_medianincome&quot; # Assigns names in names(median_income2018_viz_list)&lt;-names_median_income_list median_income2018_viz_list ## $NM_2018_ACS_medianincome ## ## $UT_2018_ACS_medianincome ## ## $AZ_2018_ACS_medianincome ## ## $WY_2018_ACS_medianincome 12.4 Dynamic mapping median_income_2016_states&lt;-get_acs(geography=&quot;state&quot;, variables=&quot;B19013_001&quot;, year=2016, geometry=TRUE) %&gt;% rename(median_income=estimate) %&gt;% arrange(desc(median_income)) %&gt;% relocate(NAME) ## Getting data from the 2012-2016 5-year ACS ## Downloading feature geometry from the Census website. To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`. median_income_map&lt;-tm_shape(median_income_2016_states)+ tm_polygons(col=&quot;median_income&quot;, n=6, style=&quot;fisher&quot;, palette=&quot;YlOrBr&quot;) tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing median_income_map "],["bivariate-analysis-with-acs-data-education-and-income.html", "13 Bivariate Analysis with ACS Data: Education and Income", " 13 Bivariate Analysis with ACS Data: Education and Income What is the relationship between county median income, and county share of the over-25 population without at least a bachelor’s degree? First, let’s inspect the variable codes for the 2018 ACS: ACS_5_2018&lt;-load_variables(2018, &quot;acs5&quot;) education_variables&lt;-ACS_5_2018 %&gt;% filter(str_detect(name, &#39;B15003&#39;)) View(education_variables) kable(education_variables) name label concept B15003_001 Estimate!!Total EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_002 Estimate!!Total!!No schooling completed EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_003 Estimate!!Total!!Nursery school EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_004 Estimate!!Total!!Kindergarten EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_005 Estimate!!Total!!1st grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_006 Estimate!!Total!!2nd grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_007 Estimate!!Total!!3rd grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_008 Estimate!!Total!!4th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_009 Estimate!!Total!!5th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_010 Estimate!!Total!!6th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_011 Estimate!!Total!!7th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_012 Estimate!!Total!!8th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_013 Estimate!!Total!!9th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_014 Estimate!!Total!!10th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_015 Estimate!!Total!!11th grade EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_016 Estimate!!Total!!12th grade, no diploma EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_017 Estimate!!Total!!Regular high school diploma EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_018 Estimate!!Total!!GED or alternative credential EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_019 Estimate!!Total!!Some college, less than 1 year EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_020 Estimate!!Total!!Some college, 1 or more years, no degree EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_021 Estimate!!Total!!Associate’s degree EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_022 Estimate!!Total!!Bachelor’s degree EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_023 Estimate!!Total!!Master’s degree EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_024 Estimate!!Total!!Professional school degree EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER B15003_025 Estimate!!Total!!Doctorate degree EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER education_vars&lt;-c(Bachelors=&quot;B15003_022&quot;, Masters=&quot;B15003_023&quot;, Professional=&quot;B15003_024&quot;, Doctorate=&quot;B15003_025&quot;) education_acs_2018&lt;-get_acs(geography=&quot;county&quot;, year=2018, variables=education_vars, summary_var=&quot;B15003_001&quot;) ## Getting data from the 2014-2018 5-year ACS education_acs_2018 ## # A tibble: 12,880 x 7 ## GEOID NAME variable estimate moe summary_est summary_moe ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01001 Autauga County, Alabama Bachelors 5903 611 37166 115 ## 2 01001 Autauga County, Alabama Masters 3406 418 37166 115 ## 3 01001 Autauga County, Alabama Professional 510 237 37166 115 ## 4 01001 Autauga County, Alabama Doctorate 472 190 37166 115 ## 5 01003 Baldwin County, Alabama Bachelors 30431 1278 146989 282 ## 6 01003 Baldwin County, Alabama Masters 11338 832 146989 282 ## 7 01003 Baldwin County, Alabama Professional 2992 471 146989 282 ## 8 01003 Baldwin County, Alabama Doctorate 1314 267 146989 282 ## 9 01005 Barbour County, Alabama Bachelors 1417 208 18173 81 ## 10 01005 Barbour County, Alabama Masters 606 122 18173 81 ## # … with 12,870 more rows pct_less_than_BA&lt;-education_acs_2018 %&gt;% group_by(GEOID, NAME) %&gt;% mutate(no_degree_pct=((summary_est-sum(estimate))/(summary_est)*100)) %&gt;% summarize(mean(no_degree_pct)) %&gt;% rename(no_degree_pct=&quot;mean(no_degree_pct)&quot;) ## `summarise()` has grouped output by &#39;GEOID&#39;. You can override using the `.groups` argument. pct_less_than_BA ## # A tibble: 3,220 x 3 ## # Groups: GEOID [3,220] ## GEOID NAME no_degree_pct ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01001 Autauga County, Alabama 72.3 ## 2 01003 Baldwin County, Alabama 68.7 ## 3 01005 Barbour County, Alabama 87.8 ## 4 01007 Bibb County, Alabama 88.5 ## 5 01009 Blount County, Alabama 87.4 ## 6 01011 Bullock County, Alabama 86.7 ## 7 01013 Butler County, Alabama 83.9 ## 8 01015 Calhoun County, Alabama 82.0 ## 9 01017 Chambers County, Alabama 86.8 ## 10 01019 Cherokee County, Alabama 87.1 ## # … with 3,210 more rows median_income_2018&lt;-get_acs(geography=&quot;county&quot;, variables=&quot;B19013_001&quot;, year=2018) %&gt;% rename(median_income=estimate) %&gt;% arrange(desc(median_income)) ## Getting data from the 2014-2018 5-year ACS median_income_nodegree&lt;-full_join(median_income_2018, pct_less_than_BA,by=&quot;GEOID&quot;) median_income_nodegree ## # A tibble: 3,220 x 7 ## GEOID NAME.x variable median_income moe NAME.y no_degree_pct ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 51107 Loudoun County, Virginia B19013_0… 136268 2063 Loudoun County, Virginia 39.2 ## 2 51610 Falls Church city, Virgin… B19013_0… 124796 15295 Falls Church city, Virgi… 21.5 ## 3 51059 Fairfax County, Virginia B19013_0… 121133 1144 Fairfax County, Virginia 38.9 ## 4 24027 Howard County, Maryland B19013_0… 117730 2023 Howard County, Maryland 38.6 ## 5 51013 Arlington County, Virginia B19013_0… 117374 2067 Arlington County, Virgin… 25.4 ## 6 06085 Santa Clara County, Calif… B19013_0… 116178 938 Santa Clara County, Cali… 48.7 ## 7 08035 Douglas County, Colorado B19013_0… 115314 2028 Douglas County, Colorado 42.1 ## 8 35028 Los Alamos County, New Me… B19013_0… 115248 7220 Los Alamos County, New M… 33.5 ## 9 06081 San Mateo County, Califor… B19013_0… 113776 1672 San Mateo County, Califo… 50.1 ## 10 34019 Hunterdon County, New Jer… B19013_0… 112535 2409 Hunterdon County, New Je… 48.0 ## # … with 3,210 more rows medianincome_nodegree_viz&lt;-median_income_nodegree %&gt;% ggplot()+ geom_point(aes(x=no_degree_pct,y=median_income))+ geom_smooth(aes(x=no_degree_pct,y=median_income),method=&quot;lm&quot;)+ ylab(&quot;Estimated County Median Income&quot;)+ xlab(&quot;Estimated Percentage of Under-25 Population Without at least Bachelors Degree&quot;) medianincome_nodegree_viz ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point). median_income_nodegree&lt;-median_income_nodegree %&gt;% separate(NAME.x,c(&quot;County&quot;,&quot;State&quot;),sep=&quot;,&quot;) median_income_nodegree ## # A tibble: 3,220 x 8 ## GEOID County State variable median_income moe NAME.y no_degree_pct ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 51107 Loudoun County &quot; Virginia&quot; B19013_001 136268 2063 Loudoun County, Virgin… 39.2 ## 2 51610 Falls Church c… &quot; Virginia&quot; B19013_001 124796 15295 Falls Church city, Vir… 21.5 ## 3 51059 Fairfax County &quot; Virginia&quot; B19013_001 121133 1144 Fairfax County, Virgin… 38.9 ## 4 24027 Howard County &quot; Maryland&quot; B19013_001 117730 2023 Howard County, Maryland 38.6 ## 5 51013 Arlington Coun… &quot; Virginia&quot; B19013_001 117374 2067 Arlington County, Virg… 25.4 ## 6 06085 Santa Clara Co… &quot; Californ… B19013_001 116178 938 Santa Clara County, Ca… 48.7 ## 7 08035 Douglas County &quot; Colorado&quot; B19013_001 115314 2028 Douglas County, Colora… 42.1 ## 8 35028 Los Alamos Cou… &quot; New Mexi… B19013_001 115248 7220 Los Alamos County, New… 33.5 ## 9 06081 San Mateo Coun… &quot; Californ… B19013_001 113776 1672 San Mateo County, Cali… 50.1 ## 10 34019 Hunterdon Coun… &quot; New Jers… B19013_001 112535 2409 Hunterdon County, New … 48.0 ## # … with 3,210 more rows medianincome_nodegree_statefacets_viz&lt;-median_income_nodegree %&gt;% ggplot()+ geom_point(aes(x=no_degree_pct,y=median_income))+ geom_smooth(aes(x=no_degree_pct,y=median_income),method=&quot;lm&quot;)+ ylab(&quot;County Median Income&quot;)+ xlab(&quot;Pct No Degree&quot;)+ facet_wrap(~State) medianincome_nodegree_statefacets_viz ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point). Nested dataset median_income_nodegree_nested&lt;-median_income_nodegree %&gt;% group_by(State) %&gt;% nest() %&gt;% arrange(State) median_income_nodegree_nested ## # A tibble: 52 x 2 ## # Groups: State [52] ## State data ## &lt;chr&gt; &lt;list&gt; ## 1 &quot; Alabama&quot; &lt;tibble [67 × 7]&gt; ## 2 &quot; Alaska&quot; &lt;tibble [29 × 7]&gt; ## 3 &quot; Arizona&quot; &lt;tibble [15 × 7]&gt; ## 4 &quot; Arkansas&quot; &lt;tibble [75 × 7]&gt; ## 5 &quot; California&quot; &lt;tibble [58 × 7]&gt; ## 6 &quot; Colorado&quot; &lt;tibble [64 × 7]&gt; ## 7 &quot; Connecticut&quot; &lt;tibble [8 × 7]&gt; ## 8 &quot; Delaware&quot; &lt;tibble [3 × 7]&gt; ## 9 &quot; District of Columbia&quot; &lt;tibble [1 × 7]&gt; ## 10 &quot; Florida&quot; &lt;tibble [67 × 7]&gt; ## # … with 42 more rows median_income_nodegree_nested %&gt;% pull(2) %&gt;% pluck(1) ## # A tibble: 67 x 7 ## GEOID County variable median_income moe NAME.y no_degree_pct ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 01117 Shelby County B19013_001 75761 1348 Shelby County, Alabama 57.9 ## 2 01089 Madison County B19013_001 63417 1447 Madison County, Alabama 58.3 ## 3 01051 Elmore County B19013_001 59347 2721 Elmore County, Alabama 75.5 ## 4 01001 Autauga County B19013_001 58786 2972 Autauga County, Alabama 72.3 ## 5 01083 Limestone County B19013_001 56460 3118 Limestone County, Alabama 74.5 ## 6 01003 Baldwin County B19013_001 55962 1204 Baldwin County, Alabama 68.7 ## 7 01115 St. Clair County B19013_001 54887 2057 St. Clair County, Alabama 83.5 ## 8 01031 Coffee County B19013_001 53155 2474 Coffee County, Alabama 76.6 ## 9 01125 Tuscaloosa County B19013_001 52221 1240 Tuscaloosa County, Alabama 69.7 ## 10 01073 Jefferson County B19013_001 51979 687 Jefferson County, Alabama 67.6 ## # … with 57 more rows median_income_nodegree_nested %&gt;% pull(&quot;data&quot;) %&gt;% pluck(6) ## # A tibble: 64 x 7 ## GEOID County variable median_income moe NAME.y no_degree_pct ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 08035 Douglas County B19013_001 115314 2028 Douglas County, Colorado 42.1 ## 2 08039 Elbert County B19013_001 96658 4279 Elbert County, Colorado 64.1 ## 3 08014 Broomfield County B19013_001 89624 4013 Broomfield County, Colorado 44.5 ## 4 08037 Eagle County B19013_001 84685 4478 Eagle County, Colorado 51.9 ## 5 08059 Jefferson County B19013_001 78943 1142 Jefferson County, Colorado 55.9 ## 6 08013 Boulder County B19013_001 78642 1583 Boulder County, Colorado 39.2 ## 7 08117 Summit County B19013_001 77589 4772 Summit County, Colorado 49.0 ## 8 08047 Gilpin County B19013_001 75120 6107 Gilpin County, Colorado 61.3 ## 9 08107 Routt County B19013_001 74273 3839 Routt County, Colorado 49.6 ## 10 08005 Arapahoe County B19013_001 73925 902 Arapahoe County, Colorado 57.8 ## # … with 54 more rows Add median income range median_income_range&lt;-function(x){ max_median_income&lt;-x %&gt;% slice_max(median_income, n=1) min_median_income&lt;-x %&gt;% slice_min(median_income, n=1) range&lt;-max_median_income$median_income-min_median_income$median_income return(range) } median_income_nodegree_nested&lt;-median_income_nodegree_nested %&gt;% mutate(county_income_range=map_dbl(data, median_income_range)) median_income_nodegree_nested ## # A tibble: 52 x 3 ## # Groups: State [52] ## State data county_income_range ## &lt;chr&gt; &lt;list&gt; &lt;dbl&gt; ## 1 &quot; Alabama&quot; &lt;tibble [67 × 7]&gt; 53957 ## 2 &quot; Alaska&quot; &lt;tibble [29 × 7]&gt; 52674 ## 3 &quot; Arizona&quot; &lt;tibble [15 × 7]&gt; 28643 ## 4 &quot; Arkansas&quot; &lt;tibble [75 × 7]&gt; 35774 ## 5 &quot; California&quot; &lt;tibble [58 × 7]&gt; 77681 ## 6 &quot; Colorado&quot; &lt;tibble [64 × 7]&gt; 84721 ## 7 &quot; Connecticut&quot; &lt;tibble [8 × 7]&gt; 28195 ## 8 &quot; Delaware&quot; &lt;tibble [3 × 7]&gt; 12221 ## 9 &quot; District of Columbia&quot; &lt;tibble [1 × 7]&gt; 0 ## 10 &quot; Florida&quot; &lt;tibble [67 × 7]&gt; 42740 ## # … with 42 more rows # Five states with highest spatial inequality with respect to county median income median_income_nodegree_nested %&gt;% ungroup() %&gt;% slice_max(county_income_range, n=5) ## # A tibble: 5 x 3 ## State data county_income_range ## &lt;chr&gt; &lt;list&gt; &lt;dbl&gt; ## 1 &quot; Virginia&quot; &lt;tibble [133 × 7]&gt; 108197 ## 2 &quot; New Mexico&quot; &lt;tibble [33 × 7]&gt; 91163 ## 3 &quot; Colorado&quot; &lt;tibble [64 × 7]&gt; 84721 ## 4 &quot; Tennessee&quot; &lt;tibble [95 × 7]&gt; 80036 ## 5 &quot; California&quot; &lt;tibble [58 × 7]&gt; 77681 # Five states with lowest spatial inequality with respect to county median income median_income_nodegree_nested %&gt;% ungroup() %&gt;% slice_min(county_income_range, n=5) ## # A tibble: 5 x 3 ## State data county_income_range ## &lt;chr&gt; &lt;list&gt; &lt;dbl&gt; ## 1 &quot; District of Columbia&quot; &lt;tibble [1 × 7]&gt; 0 ## 2 &quot; Delaware&quot; &lt;tibble [3 × 7]&gt; 12221 ## 3 &quot; Puerto Rico&quot; &lt;tibble [78 × 7]&gt; 21125 ## 4 &quot; Hawaii&quot; &lt;tibble [5 × 7]&gt; 23609 ## 5 &quot; Rhode Island&quot; &lt;tibble [5 × 7]&gt; 26068 correlation_income_ed&lt;-function(x){ income&lt;-x$median_income education&lt;-x$no_degree_pct corr_table&lt;-cor.test(income, education) return(corr_table) } median_income_nodegree_nested_final&lt;- median_income_nodegree_nested %&gt;% filter(county_income_range&gt;0) %&gt;% mutate(correlation_education_income=map(data, correlation_income_ed)) median_income_nodegree_nested_final ## # A tibble: 51 x 4 ## # Groups: State [51] ## State data county_income_range correlation_education_income ## &lt;chr&gt; &lt;list&gt; &lt;dbl&gt; &lt;list&gt; ## 1 &quot; Alabama&quot; &lt;tibble [67 × 7]&gt; 53957 &lt;htest&gt; ## 2 &quot; Alaska&quot; &lt;tibble [29 × 7]&gt; 52674 &lt;htest&gt; ## 3 &quot; Arizona&quot; &lt;tibble [15 × 7]&gt; 28643 &lt;htest&gt; ## 4 &quot; Arkansas&quot; &lt;tibble [75 × 7]&gt; 35774 &lt;htest&gt; ## 5 &quot; California&quot; &lt;tibble [58 × 7]&gt; 77681 &lt;htest&gt; ## 6 &quot; Colorado&quot; &lt;tibble [64 × 7]&gt; 84721 &lt;htest&gt; ## 7 &quot; Connecticut&quot; &lt;tibble [8 × 7]&gt; 28195 &lt;htest&gt; ## 8 &quot; Delaware&quot; &lt;tibble [3 × 7]&gt; 12221 &lt;htest&gt; ## 9 &quot; Florida&quot; &lt;tibble [67 × 7]&gt; 42740 &lt;htest&gt; ## 10 &quot; Georgia&quot; &lt;tibble [159 × 7]&gt; 76743 &lt;htest&gt; ## # … with 41 more rows # Alabama correlation coefficient table median_income_nodegree_nested_final %&gt;% pull(4) %&gt;% pluck(1) ## ## Pearson&#39;s product-moment correlation ## ## data: income and education ## t = -7.8769, df = 65, p-value = 4.828e-11 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.8040703 -0.5511499 ## sample estimates: ## cor ## -0.6988386 # Colorado correlation coefficient table median_income_nodegree_nested_final %&gt;% pull(4) %&gt;% pluck(6) ## ## Pearson&#39;s product-moment correlation ## ## data: income and education ## t = -8.3654, df = 62, p-value = 9.213e-12 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.8261114 -0.5875192 ## sample estimates: ## cor ## -0.7281682 "],["integrating-census-data-and-external-data.html", "14 Integrating census data and external data 14.1 Reading external data into R Studio", " 14 Integrating census data and external data 14.1 Reading external data into R Studio Colorado open Covid-19 data is available here: https://data-cdphe.opendata.arcgis.com/datasets/colorado-covid-19-positive-cases-and-rates-of-infection-by-county-of-identification/explore?location=38.997818%2C-105.550873%2C7.60&amp;showTable=true For the purpose of this workshop, we’ve also placed this data (which runs through January 23, 2022) on dropbox, available here: https://www.dropbox.com/s/954sfaykdcs2q4f/co_covid.csv?dl=0. It is possible to read data into R Studio straight from an online source. To read in a file stored on Dropbox, simply change the “0” at the end of the link into a “1” and paste it into the read_csv function. Here, we’ll read the Colorado Covid dataset into our R environment directly from the online source, and assign it to a new object named co_covid. co_covid&lt;-read_csv(&quot;https://www.dropbox.com/s/954sfaykdcs2q4f/co_covid.csv?dl=1&quot;) ## ## ── Column specification ───────────────────────────────────────────────────────────────────────────────── ## cols( ## .default = col_double(), ## FULL_ = col_character(), ## GEOID = col_character(), ## LABEL = col_character(), ## STAETFP = col_character(), ## COUNTY = col_character(), ## COUNTYFP = col_character(), ## Data_Source = col_character(), ## Date_Data_Last_Updated = col_character() ## ) ## ℹ Use `spec()` for the full column specifications. co_covid ## # A tibble: 67 x 29 ## OBJECTID FULL_ GEOID LABEL STAETFP COUNTY COUNTYFP County_Pos_Cases County_Populati… County_Rate_Per… ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Sagu… 08109 Sagu… 08 SAGUA… 109 993 6414 15482. ## 2 2 Sedg… 08115 Sedg… 08 SEDGW… 115 412 2409 17103. ## 3 3 Chey… 08017 Chey… 08 CHEYE… 017 282 1743 16179 ## 4 4 Cust… 08027 Cust… 08 CUSTER 027 565 4713 11988. ## 5 5 La P… 08067 La P… 08 LA PL… 067 11076 55649 19903. ## 6 6 San … 08111 San … 08 SAN J… 111 182 714 25490. ## 7 7 Pitk… 08097 Pitk… 08 PITKIN 097 5853 17363 33710. ## 8 8 Park… 08093 Park 08 PARK 093 2550 17427 14632. ## 9 9 Alam… 08003 Alam… 08 ALAMO… 003 3814 16329 23357. ## 10 10 Prow… 08099 Prow… 08 PROWE… 099 2308 12015 19209. ## # … with 57 more rows, and 19 more variables: County_Pos_Cases_Yesterday &lt;dbl&gt;, ## # County_Pos_Cases_Change &lt;dbl&gt;, County_Deaths &lt;dbl&gt;, County_Deaths_Yesterday &lt;dbl&gt;, ## # County_Deaths_Change &lt;dbl&gt;, State_Pos_Cases &lt;dbl&gt;, State_Population &lt;dbl&gt;, ## # State_Rate_Per_100000 &lt;dbl&gt;, State_Deaths &lt;dbl&gt;, State_CDC_Deaths &lt;dbl&gt;, ## # State_Number_Hospitalizations &lt;dbl&gt;, State_Number_Tested &lt;dbl&gt;, State_Test_Encounters &lt;dbl&gt;, ## # State_Number_of_Counties_Pos &lt;dbl&gt;, State_Number_of_Outbreaks &lt;dbl&gt;, Data_Source &lt;chr&gt;, ## # Date_Data_Last_Updated &lt;chr&gt;, Shape__Area &lt;dbl&gt;, Shape__Length &lt;dbl&gt; Alternatively, if the dataset you want to load into R has already been downloaded to your computer, simply paste in the filename into the read_csv function. For example: co_covid&lt;-read_csv(&quot;co_covid.csv&quot;) Note that reading in downloaded data with the filename (here, co_covid.csv) is only possible if the file is in our working directory; if it is in another directory, we must pass the full path to the file into the read_csv function. co_covid_medianincome&lt;-inner_join(median_income_nodegree, co_covid,by=&quot;GEOID&quot;) co_covid_medianincome ## # A tibble: 64 x 36 ## GEOID County State variable median_income moe NAME.y no_degree_pct OBJECTID FULL_ LABEL STAETFP ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 08035 Dougl… &quot; Co… B19013_… 115314 2028 Dougl… 42.1 52 Doug… Doug… 08 ## 2 08039 Elber… &quot; Co… B19013_… 96658 4279 Elber… 64.1 59 Elbe… Elbe… 08 ## 3 08014 Broom… &quot; Co… B19013_… 89624 4013 Broom… 44.5 21 Broo… Broo… 08 ## 4 08037 Eagle… &quot; Co… B19013_… 84685 4478 Eagle… 51.9 18 Eagl… Eagle 08 ## 5 08059 Jeffe… &quot; Co… B19013_… 78943 1142 Jeffe… 55.9 12 Jeff… Jeff… 08 ## 6 08013 Bould… &quot; Co… B19013_… 78642 1583 Bould… 39.2 15 Boul… Boul… 08 ## 7 08117 Summi… &quot; Co… B19013_… 77589 4772 Summi… 49.0 13 Summ… Summ… 08 ## 8 08047 Gilpi… &quot; Co… B19013_… 75120 6107 Gilpi… 61.3 45 Gilp… Gilp… 08 ## 9 08107 Routt… &quot; Co… B19013_… 74273 3839 Routt… 49.6 39 Rout… Routt 08 ## 10 08005 Arapa… &quot; Co… B19013_… 73925 902 Arapa… 57.8 62 Arap… Arap… 08 ## # … with 54 more rows, and 24 more variables: COUNTY &lt;chr&gt;, COUNTYFP &lt;chr&gt;, County_Pos_Cases &lt;dbl&gt;, ## # County_Population &lt;dbl&gt;, County_Rate_Per_100_000 &lt;dbl&gt;, County_Pos_Cases_Yesterday &lt;dbl&gt;, ## # County_Pos_Cases_Change &lt;dbl&gt;, County_Deaths &lt;dbl&gt;, County_Deaths_Yesterday &lt;dbl&gt;, ## # County_Deaths_Change &lt;dbl&gt;, State_Pos_Cases &lt;dbl&gt;, State_Population &lt;dbl&gt;, ## # State_Rate_Per_100000 &lt;dbl&gt;, State_Deaths &lt;dbl&gt;, State_CDC_Deaths &lt;dbl&gt;, ## # State_Number_Hospitalizations &lt;dbl&gt;, State_Number_Tested &lt;dbl&gt;, State_Test_Encounters &lt;dbl&gt;, ## # State_Number_of_Counties_Pos &lt;dbl&gt;, State_Number_of_Outbreaks &lt;dbl&gt;, Data_Source &lt;chr&gt;, ## # Date_Data_Last_Updated &lt;chr&gt;, Shape__Area &lt;dbl&gt;, Shape__Length &lt;dbl&gt; co_covid_medianincome_viz&lt;-co_covid_medianincome %&gt;% ggplot()+ geom_point(aes(x=median_income,y=County_Rate_Per_100_000))+ ylab(&quot;County Covid+ Rate Per 100,000&quot;)+ xlab(&quot;County Median Income, 2018 (ACS Estimate)&quot;) co_covid_medianincome_viz income_cases_corr&lt;-cor.test(co_covid_medianincome$median_income, co_covid_medianincome$County_Rate_Per_100_000) income_cases_corr ## ## Pearson&#39;s product-moment correlation ## ## data: co_covid_medianincome$median_income and co_covid_medianincome$County_Rate_Per_100_000 ## t = -0.5885, df = 62, p-value = 0.5583 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.3145776 0.1744741 ## sample estimates: ## cor ## -0.0745316 acs_2019_nonwhite_COcounties&lt;-get_acs(geography=&quot;county&quot;, state=&quot;CO&quot;, variables=&quot;B03002_003&quot;, summary_var = &quot;B03002_001&quot;, year=2019) %&gt;% mutate(white_pct=(estimate/summary_est)*100) %&gt;% mutate(nonwhite_pct=100-white_pct) ## Getting data from the 2015-2019 5-year ACS ## Using FIPS code &#39;08&#39; for state &#39;CO&#39; co_covid_race&lt;-inner_join(acs_2019_nonwhite_COcounties, co_covid,by=&quot;GEOID&quot;) co_covid_race_viz&lt;-co_covid_race %&gt;% ggplot()+ geom_point(aes(x=nonwhite_pct,y=County_Rate_Per_100_000))+ ylab(&quot;County Covid+ Rate Per 100,000&quot;)+ xlab(&quot;Non-White/Non-Hispanic Share of County Population, 2019 (ACS Estimate)&quot;) nonwhite_cases_corr&lt;-cor.test(co_covid_race$nonwhite_pct, co_covid_race$County_Rate_Per_100_000) co_covid_race_viz nonwhite_cases_corr ## ## Pearson&#39;s product-moment correlation ## ## data: co_covid_race$nonwhite_pct and co_covid_race$County_Rate_Per_100_000 ## t = 1.6873, df = 62, p-value = 0.09657 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.03824775 0.43303727 ## sample estimates: ## cor ## 0.2095315 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
